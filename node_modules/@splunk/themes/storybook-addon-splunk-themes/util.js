"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeOptionsFromContext = exports.getMergedTheme = exports.normalizeThemeOptions = void 0;

var _constants = require("./constants");

var _themeOptions = require("./themeOptions");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var normalizeThemeOptions = function normalizeThemeOptions() {
  var paramOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var globalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _objectSpread(_objectSpread({}, paramOptions), globalOptions);
}; // merge the existing theme with the newly selected theme
// this functon only allows the most recently-selectd "both" option to persist
// because allowing more than one "both" leads to an unwieldy visualization


exports.normalizeThemeOptions = normalizeThemeOptions;

var getMergedTheme = function getMergedTheme(globalsTheme, newTheme) {
  var firstBothEntry = Object.entries(newTheme).find(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        value = _ref2[1];

    return value === 'both';
  });

  var _ref3 = firstBothEntry || [],
      _ref4 = _slicedToArray(_ref3, 1),
      firstBothOption = _ref4[0];

  var finalValue; // only allow "both" for a single theme setting; if a new one is passed, remove the old one

  var mergedTheme = Object.entries(_themeOptions.themeOptions).reduce(function (themeAccum, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
        key = _ref6[0];

    if ((0, _themeOptions.isThemeOptionKey)(key)) {
      if ((globalsTheme === null || globalsTheme === void 0 ? void 0 : globalsTheme[key]) === 'both' && firstBothOption != null && key !== firstBothOption) {
        var defaultThemeOptionValue = _themeOptions.themeOptions[key].values[0];
        finalValue = defaultThemeOptionValue;
      } else {
        finalValue = newTheme[key] || (globalsTheme === null || globalsTheme === void 0 ? void 0 : globalsTheme[key]);
      }

      if (finalValue != null) {
        return _objectSpread(_objectSpread({}, themeAccum), {}, _defineProperty({}, key, finalValue));
      }
    }

    return themeAccum;
  }, {});
  return mergedTheme;
};

exports.getMergedTheme = getMergedTheme;

var getThemeOptionsFromContext = function getThemeOptionsFromContext(context) {
  var globals = context.globals,
      parameters = context.parameters;
  var globalsTheme = globals[_constants.PARAM_KEY];
  var themesConfig = parameters[_constants.PARAM_KEY];
  return normalizeThemeOptions(themesConfig, globalsTheme);
};

exports.getThemeOptionsFromContext = getThemeOptionsFromContext;