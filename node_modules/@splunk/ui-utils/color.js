"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expandShortHandHex = expandShortHandHex;
exports.isValidHexColor = isValidHexColor;
exports.hexToRgb = hexToRgb;
exports.isCSSColor = isCSSColor;
exports.isValidRgb = isValidRgb;
exports.namedColorToHex = namedColorToHex;
exports.extendedColorKeywordsToHex = exports.extendedColorKeywords = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) { n[e] = r[e]; } return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0) { ; } } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/* eslint-disable import/prefer-default-export */
/**
 * @file
 * A set of functions for Color.
 */

/**
 * Converts shorthand hex color value to the equivalent six-digit hexadecimal value.
 *
 *
 * @param {string|null|undefined} value - Three-digit or four-digit shorthand hexadecimal value to be converted.
 * @returns {string|null|undefined} value - If valid three or four-digit shorthand hexadecimal value, returns
 * converted six-digit or eight-digit code; original value otherwise.
 * @public
 */
function expandShortHandHex(value) {
  if (typeof value === 'string') {
    var startsWithPound = value.startsWith('#');
    var valueWithoutPound = startsWithPound ? value.slice(1) : value;
    var isShorthanded = /^[0-9A-F]{3,4}$/i.test(valueWithoutPound);
    var _valueWithoutPound = _slicedToArray(valueWithoutPound, 4),
      r = _valueWithoutPound[0],
      g = _valueWithoutPound[1],
      b = _valueWithoutPound[2],
      _valueWithoutPound$ = _valueWithoutPound[3],
      a = _valueWithoutPound$ === void 0 ? '' : _valueWithoutPound$;
    var sixHexadecimal = isShorthanded ? "".concat(r).concat(r).concat(g).concat(g).concat(b).concat(b).concat(a).concat(a) : valueWithoutPound;
    return startsWithPound ? "#".concat(sixHexadecimal) : sixHexadecimal;
  }
  return value;
}

/**
 * Returns true when `value` is a valid `<hex-color>`.
 * `<hex-color>`s are strings that can be 3, 4, 6, or 8 digits and must start with `#`.
 *
 * @param {string} value
 * @returns {boolean}
 * @public
 */
function isValidHexColor(value) {
  return /(^#[0-9a-f]{3}$)|(^#[0-9a-f]{6}$)|(^#[0-9a-f]{4}$)|(^#[0-9a-f]{8}$)/i.test(value.toString().toLowerCase());
}

/**
 * Converts hex color to an array of rgb values.
 * @param {string} hex - The 6 digit hex color. This doesn't accept hex colors of other digit lengths.
 * @returns {number[] | null}
 * @public
 */
function hexToRgb(hex) {
  if (typeof hex === 'string' && isValidHexColor(hex) && hex.length === 7) {
    var hexNumbersAndLetters = hex.replace('#', '').match(/.{1,2}/g);
    if (hexNumbersAndLetters != null) {
      var rgb = hexNumbersAndLetters.map(function (value) {
        return parseInt(value, 16);
      });
      var _rgb = _slicedToArray(rgb, 3),
        r = _rgb[0],
        g = _rgb[1],
        b = _rgb[2];
      return [r, g, b];
    }
  }
  return null;
}

/**
 * `Array` containing `string`s of the [named colors](https://www.w3.org/TR/css-color-4/#named-colors) from [CSS Color Module 4](https://www.w3.org/TR/css-color-4).
 * @public
 */
var extendedColorKeywords = ['aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'rebeccapurple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow', 'yellowgreen'];

/**
 * Validates if the given string is a [<color> type](https://www.w3.org/TR/css-color-4/#color-type) in CSS.
 *
 * Supports:
 * - `<hex-color>`s 3, 4, 6 and 8 digit
 * - `<named-color>`https://www.w3.org/TR/css-color-4/#named-colors
 * - `'currentColor'`
 * - `'transparent'`
 *
 * Does not support:
 * - the color-functions: `<rgb()>`, `<rgba()>`, `<hsl()>`, `<hsla()>`, `<hwb()>`, `<lab()>`, `<lch()>`, and `<color()>`.
 * - `<device-cmyk()>`
 * - `<system-color>`
 *
 * @param {string} value
 * @returns {boolean}
 * @public
 */
exports.extendedColorKeywords = extendedColorKeywords;
function isCSSColor(value) {
  if (typeof value !== 'string') {
    return false;
  }

  // <hex-color>
  if (isValidHexColor(value)) {
    return true;
  }

  // <named-color>, transparent, currentColor
  // Check last so iterating extendedColorKeywords is last resort
  return value === 'transparent' || value === 'currentColor' || extendedColorKeywords.includes(value.toLowerCase());
}

/**
 * Returns true when `value` is a valid `<rgb>`.
 * `<rgb>`s are strings that have 3 comma separated numbers.
 * This is not for validating `<rgba>`s.
 * `<rgba>`s are strings that have 4 comma separated numbers.
 *
 * @param {string} value
 * @returns {boolean}
 * @public
 */
function isValidRgb(value) {
  var rgb = value.replace(/[^\d,-]/g, '').split(',');
  var rgbNumbers = rgb.map(function (v) {
    return parseInt(v, 10);
  });
  if (rgbNumbers.length === 3) {
    var validRgbNumbers = rgbNumbers.filter(function (rgbNumber) {
      return typeof rgbNumber === 'number' && rgbNumber >= 0 && rgbNumber <= 255;
    });
    return validRgbNumbers.length === 3;
  }
  return false;
}

/**
 * `Object` containing `string`s of the [named colors](https://www.w3.org/TR/css-color-4/#named-colors) and their hex colors from [CSS Color Module 4](https://www.w3.org/TR/css-color-4).
 * @public
 */
var extendedColorKeywordsToHex = {
  aliceblue: '#F0F8FF',
  antiquewhite: '#FAEBD7',
  aqua: '#00FFFF',
  aquamarine: '#7FFFD4',
  azure: '#F0FFFF',
  beige: '#F5F5DC',
  bisque: '#FFE4C4',
  black: '#000000',
  blanchedalmond: '#FFEBCD',
  blue: '#0000FF',
  blueviolet: '#8A2BE2',
  brown: '#A52A2A',
  burlywood: '#DEB887',
  cadetblue: '#5F9EA0',
  chartreuse: '#7FFF00',
  chocolate: '#D2691E',
  coral: '#FF7F50',
  cornflowerblue: '#6495ED',
  cornsilk: '#FFF8DC',
  crimson: '#DC143C',
  cyan: '#00FFFF',
  darkblue: '#00008B',
  darkcyan: '#008B8B',
  darkgoldenrod: '#B8860B',
  darkgray: '#A9A9A9',
  darkgreen: '#006400',
  darkgrey: '#A9A9A9',
  darkkhaki: '#BDB76B',
  darkmagenta: '#8B008B',
  darkolivegreen: '#556B2F',
  darkorange: '#FF8C00',
  darkorchid: '#9932CC',
  darkred: '#8B0000',
  darksalmon: '#E9967A',
  darkseagreen: '#8FBC8F',
  darkslateblue: '#483D8B',
  darkslategray: '#2F4F4F',
  darkslategrey: '#2F4F4F',
  darkturquoise: '#00CED1',
  darkviolet: '#9400D3',
  deeppink: '#FF1493',
  deepskyblue: '#00BFFF',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1E90FF',
  firebrick: '#B22222',
  floralwhite: '#FFFAF0',
  forestgreen: '#228B22',
  fuchsia: '#FF00FF',
  gainsboro: '#DCDCDC',
  ghostwhite: '#F8F8FF',
  gold: '#FFD700',
  goldenrod: '#DAA520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#ADFF2F',
  grey: '#808080',
  honeydew: '#F0FFF0',
  hotpink: '#FF69B4',
  indianred: '#CD5C5C',
  indigo: '#4B0082',
  ivory: '#FFFFF0',
  khaki: '#F0E68C',
  lavender: '#E6E6FA',
  lavenderblush: '#FFF0F5',
  lawngreen: '#7CFC00',
  lemonchiffon: '#FFFACD',
  lightblue: '#ADD8E6',
  lightcoral: '#F08080',
  lightcyan: '#E0FFFF',
  lightgoldenrodyellow: '#FAFAD2',
  lightgray: '#D3D3D3',
  lightgreen: '#90EE90',
  lightgrey: '#D3D3D3',
  lightpink: '#FFB6C1',
  lightsalmon: '#FFA07A',
  lightseagreen: '#20B2AA',
  lightskyblue: '#87CEFA',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#B0C4DE',
  lightyellow: '#FFFFE0',
  lime: '#00FF00',
  limegreen: '#32CD32',
  linen: '#FAF0E6',
  magenta: '#FF00FF',
  maroon: '#800000',
  mediumaquamarine: '#66CDAA',
  mediumblue: '#0000CD',
  mediumorchid: '#BA55D3',
  mediumpurple: '#9370DB',
  mediumseagreen: '#3CB371',
  mediumslateblue: '#7B68EE',
  mediumspringgreen: '#00FA9A',
  mediumturquoise: '#48D1CC',
  mediumvioletred: '#C71585',
  midnightblue: '#191970',
  mintcream: '#F5FFFA',
  mistyrose: '#FFE4E1',
  moccasin: '#FFE4B5',
  navajowhite: '#FFDEAD',
  navy: '#000080',
  oldlace: '#FDF5E6',
  olive: '#808000',
  olivedrab: '#6B8E23',
  orange: '#FFA500',
  orangered: '#FF4500',
  orchid: '#DA70D6',
  palegoldenrod: '#EEE8AA',
  palegreen: '#98FB98',
  paleturquoise: '#AFEEEE',
  palevioletred: '#DB7093',
  papayawhip: '#FFEFD5',
  peachpuff: '#FFDAB9',
  peru: '#CD853F',
  pink: '#FFC0CB',
  plum: '#DDA0DD',
  powderblue: '#B0E0E6',
  purple: '#800080',
  rebeccapurple: '#663399',
  red: '#FF0000',
  rosybrown: '#BC8F8F',
  royalblue: '#4169E1',
  saddlebrown: '#8B4513',
  salmon: '#FA8072',
  sandybrown: '#F4A460',
  seagreen: '#2E8B57',
  seashell: '#FFF5EE',
  sienna: '#A0522D',
  silver: '#C0C0C0',
  skyblue: '#87CEEB',
  slateblue: '#6A5ACD',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#FFFAFA',
  springgreen: '#00FF7F',
  steelblue: '#4682B4',
  tan: '#D2B48C',
  teal: '#008080',
  thistle: '#D8BFD8',
  tomato: '#FF6347',
  turquoise: '#40E0D0',
  violet: '#EE82EE',
  wheat: '#F5DEB3',
  white: '#FFFFFF',
  whitesmoke: '#F5F5F5',
  yellow: '#FFFF00',
  yellowgreen: '#9ACD32'
};

/**
 * Converts a named color to its corresponding 6 digit hex color.
 * @param {string} colorName - The [named color](https://www.w3.org/TR/css-color-4/#named-colors)
 * @returns {string | undefined}
 */
exports.extendedColorKeywordsToHex = extendedColorKeywordsToHex;
function namedColorToHex(colorName) {
  return extendedColorKeywordsToHex[colorName];
}