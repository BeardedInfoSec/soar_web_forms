/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var C = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/    (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ C.n = e => {
            /******/ var r = e && e.__esModule ? 
            /******/ () => e["default"]
            /******/ : () => e
            /******/;
            C.d(r, {
                a: r
            });
            /******/            return r;
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/    (() => {
        /******/ // define getter functions for harmony exports
        /******/ C.d = (e, r) => {
            /******/ for (var t in r) {
                /******/ if (C.o(r, t) && !C.o(e, t)) {
                    /******/ Object.defineProperty(e, t, {
                        enumerable: true,
                        get: r[t]
                    });
                    /******/                }
                /******/            }
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/    (() => {
        /******/ C.o = (C, e) => Object.prototype.hasOwnProperty.call(C, e)
        /******/;
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/    (() => {
        /******/ // define __esModule on exports
        /******/ C.r = C => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(C, Symbol.toStringTag, {
                    value: "Module"
                });
                /******/            }
            /******/            Object.defineProperty(C, "__esModule", {
                value: true
            });
            /******/        };
        /******/    })();
    /******/
    /************************************************************************/    var e = {};
    // ESM COMPAT FLAG
        C.r(e);
    // EXPORTS
        C.d(e, {
        default: () => /* binding */ v
    });
    // CONCATENATED MODULE: external "react"
    const r = require("react");
    var t =  C.n(r);
    // CONCATENATED MODULE: external "@splunk/react-icons/SVG"
    const n = require("@splunk/react-icons/SVG");
    var L =  C.n(n);
    // CONCATENATED MODULE: external "@splunk/react-icons/IconProvider"
    const l = require("@splunk/react-icons/IconProvider");
    // CONCATENATED MODULE: ./src/icons/Token.tsx
    function a(C, e) {
        if (null == C) return {};
        var r, t, n = o(C, e);
        if (Object.getOwnPropertySymbols) {
            var L = Object.getOwnPropertySymbols(C);
            for (t = 0; t < L.length; t++) {
                r = L[t], e.includes(r) || {}.propertyIsEnumerable.call(C, r) && (n[r] = C[r]);
            }
        }
        return n;
    }
    function o(C, e) {
        if (null == C) return {};
        var r = {};
        for (var t in C) {
            if ({}.hasOwnProperty.call(C, t)) {
                if (e.includes(t)) continue;
                r[t] = C[t];
            }
        }
        return r;
    }
    var u = new Map;
    u.set("outlined", (function() {
        
        return t().createElement(t().Fragment, null,  t().createElement("path", {
            d: "M9.125 8.22226V8C9.125 7.51675 9.51675 7.125 10 7.125C10.4832 7.125 10.875 7.51675 10.875 8V8.23174C10.9549 8.25183 11.034 8.27539 11.112 8.30236L11.1302 8.30866C11.4585 8.42218 11.7624 8.59679 12.0258 8.82327C12.1777 8.95388 12.3149 9.10067 12.435 9.26104L12.6262 9.51647C12.9158 9.90332 12.837 10.4517 12.4501 10.7413C12.0633 11.0309 11.5149 10.9521 11.2253 10.5653L11.0341 10.3098C10.9903 10.2514 10.9403 10.1978 10.8849 10.1502C10.7888 10.0676 10.6781 10.004 10.5583 9.96258L10.5401 9.95628C10.4527 9.92604 10.3617 9.9069 10.2695 9.89932L10.1677 9.89095C10.0627 9.88233 9.95713 9.88238 9.85212 9.89111L9.6634 9.90681C9.60327 9.91181 9.54359 9.92126 9.48486 9.93507L9.42302 9.94962C9.32481 9.97272 9.2314 10.0129 9.14706 10.0682L9.08217 10.1108C9.04648 10.1343 9.01486 10.1634 8.98857 10.197L8.98368 10.2033C8.95037 10.2459 8.92718 10.2955 8.91585 10.3484L8.91279 10.3627C8.90326 10.4072 8.90416 10.4533 8.91542 10.4974C8.93033 10.5557 8.96278 10.6081 9.00839 10.6475L9.02505 10.6619C9.04854 10.6822 9.07451 10.6994 9.10234 10.713L9.22117 10.7715C9.31185 10.8161 9.40709 10.8508 9.50523 10.8749L9.82282 10.9529L10.4146 11.0604L10.8006 11.1345C11.018 11.1762 11.2298 11.2435 11.4315 11.3348L11.484 11.3585C11.6954 11.4542 11.892 11.5798 12.0676 11.7315L12.0946 11.7548C12.2652 11.9022 12.4121 12.075 12.53 12.2673C12.6898 12.5278 12.7933 12.8189 12.8338 13.1219L12.8422 13.1851C12.8687 13.3836 12.8693 13.5847 12.8437 13.7833L12.8414 13.8012C12.7939 14.1706 12.6547 14.5222 12.4364 14.8239C12.2679 15.0569 12.0559 15.255 11.8121 15.4075L11.768 15.435C11.5581 15.5663 11.3299 15.6656 11.0908 15.7297L10.9983 15.7545C10.9574 15.7655 10.9163 15.7756 10.875 15.7849V16C10.875 16.4832 10.4832 16.875 10 16.875C9.51675 16.875 9.125 16.4832 9.125 16V15.7387C8.97005 15.6974 8.81815 15.6446 8.67057 15.5808L8.59752 15.5492C8.42885 15.4763 8.26857 15.3854 8.11949 15.278C7.80584 15.052 7.54781 14.7575 7.365 14.4168L7.29586 14.288C7.06733 13.8622 7.22725 13.3318 7.65305 13.1033C8.07885 12.8747 8.60928 13.0347 8.83781 13.4605L8.90695 13.5893C8.96403 13.6956 9.0446 13.7876 9.14253 13.8581C9.18908 13.8917 9.23913 13.9201 9.29179 13.9428L9.36484 13.9744C9.49573 14.031 9.63389 14.0689 9.7753 14.0872L9.87263 14.0997C9.98645 14.1144 10.1014 14.1185 10.216 14.112L10.2646 14.1093C10.3594 14.1039 10.4534 14.0888 10.5451 14.0642L10.6376 14.0394C10.7091 14.0202 10.7774 13.9905 10.8401 13.9513L10.8842 13.9237C10.9366 13.8909 10.9823 13.8483 11.0185 13.7982C11.0655 13.7332 11.0955 13.6575 11.1057 13.578L11.108 13.5602C11.1141 13.5127 11.114 13.4645 11.1076 13.417L11.0992 13.3538C11.0911 13.293 11.0703 13.2345 11.0382 13.1822C11.0145 13.1436 10.985 13.1089 10.9508 13.0793L10.9238 13.056C10.8752 13.014 10.8208 12.9793 10.7624 12.9528L10.7098 12.929C10.6334 12.8944 10.5531 12.8689 10.4707 12.8531L10.089 12.7799L9.45747 12.6651L9.08797 12.5744C8.86703 12.5202 8.65262 12.4422 8.4485 12.3417L8.32967 12.2832C8.16831 12.2038 8.01773 12.1042 7.88158 11.9866L7.86492 11.9723C7.54845 11.6991 7.32331 11.3355 7.21985 10.9304C7.14174 10.6246 7.13549 10.3048 7.20159 9.9962L7.20466 9.98189C7.2715 9.6698 7.40837 9.37697 7.60493 9.12551L7.60982 9.11926C7.75364 8.93527 7.92658 8.77605 8.1218 8.64789L8.18668 8.6053C8.44209 8.43763 8.72493 8.31606 9.02235 8.2461L9.08418 8.23156C9.09777 8.22836 9.11137 8.22526 9.125 8.22226Z"
        }),  t().createElement("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M4.95736 5.74315C6.18521 4.10601 7.95782 3 10 3C10.118 3 10.2352 3.00369 10.3513 3.01097C10.3998 3.00375 10.4495 3 10.5 3H14C16.0422 3 17.8148 4.10601 19.0426 5.74315C20.2703 7.37998 21 9.59541 21 12C21 14.4046 20.2703 16.62 19.0426 18.2569C17.8148 19.894 16.0422 21 14 21H10.5C10.4495 21 10.3998 20.9963 10.3513 20.989C10.2352 20.9963 10.118 21 10 21C7.95782 21 6.18521 19.894 4.95736 18.2569C3.72973 16.62 3 14.4046 3 12C3 9.59541 3.72973 7.37998 4.95736 5.74315ZM6.55736 6.94315C5.61341 8.20174 5 9.98631 5 12C5 14.0137 5.61341 15.7983 6.55736 17.0569C7.50108 18.3151 8.72847 19 10 19C11.2715 19 12.4989 18.3151 13.4426 17.0569C14.3866 15.7983 15 14.0137 15 12C15 9.98631 14.3866 8.20174 13.4426 6.94315C12.4989 5.68486 11.2715 5 10 5C8.72847 5 7.50108 5.68486 6.55736 6.94315ZM15.0426 5.74315C14.8537 5.49122 14.6519 5.25187 14.4381 5.0272C15.5511 5.16572 16.6078 5.83008 17.4426 6.94315C18.3866 8.20174 19 9.98631 19 12C19 14.0137 18.3866 15.7983 17.4426 17.0569C16.6078 18.1699 15.5511 18.8343 14.4381 18.9728C14.6519 18.7481 14.8537 18.5088 15.0426 18.2569C16.2703 16.62 17 14.4046 17 12C17 9.59541 16.2703 7.37998 15.0426 5.74315Z"
        }));
    }));
    u.set("filled", (function() {
        
        return t().createElement(t().Fragment, null,  t().createElement("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M4.95736 5.74315C6.18521 4.10601 7.95782 3 10 3C10.118 3 10.2352 3.00369 10.3513 3.01097C10.3998 3.00375 10.4495 3 10.5 3H14C16.0422 3 17.8148 4.10601 19.0426 5.74315C20.2703 7.37998 21 9.59541 21 12C21 14.4046 20.2703 16.62 19.0426 18.2569C17.8148 19.894 16.0422 21 14 21H10.5C10.4495 21 10.3998 20.9963 10.3513 20.989C10.2352 20.9963 10.118 21 10 21C7.95782 21 6.18521 19.894 4.95736 18.2569C3.72973 16.62 3 14.4046 3 12C3 9.59541 3.72973 7.37998 4.95736 5.74315ZM15.0426 18.2569C14.8537 18.5088 14.6519 18.7481 14.4381 18.9728C15.5511 18.8343 16.6078 18.1699 17.4426 17.0569C18.3866 15.7983 19 14.0137 19 12C19 9.98631 18.3866 8.20174 17.4426 6.94315C16.6078 5.83008 15.5511 5.16572 14.4381 5.0272C14.6519 5.25187 14.8537 5.49122 15.0426 5.74315C16.2703 7.37998 17 9.59541 17 12C17 14.4046 16.2703 16.62 15.0426 18.2569ZM10 7.125C10.4832 7.125 10.875 7.51675 10.875 8V8.23174C10.9549 8.25183 11.034 8.27539 11.112 8.30236L11.1302 8.30866C11.4585 8.42218 11.7624 8.59679 12.0258 8.82327C12.1777 8.95388 12.3149 9.10067 12.435 9.26104L12.6262 9.51647C12.9158 9.90332 12.837 10.4517 12.4501 10.7413C12.0633 11.0309 11.5149 10.9521 11.2253 10.5653L11.0341 10.3098C10.9903 10.2514 10.9403 10.1978 10.8849 10.1502C10.7888 10.0676 10.6781 10.004 10.5583 9.96258L10.5401 9.95628C10.4527 9.92604 10.3617 9.9069 10.2695 9.89932L10.1677 9.89095C10.0627 9.88233 9.95713 9.88238 9.85212 9.89111L9.6634 9.90681C9.60327 9.91181 9.54359 9.92126 9.48486 9.93507L9.42302 9.94962C9.32481 9.97272 9.2314 10.0129 9.14706 10.0682L9.08217 10.1108C9.04648 10.1343 9.01486 10.1634 8.98857 10.197L8.98368 10.2033C8.95037 10.2459 8.92718 10.2955 8.91585 10.3484L8.91279 10.3627C8.90326 10.4072 8.90416 10.4533 8.91542 10.4974C8.93033 10.5557 8.96278 10.6081 9.00839 10.6475L9.02505 10.6619C9.04854 10.6822 9.07451 10.6994 9.10234 10.713L9.22117 10.7715C9.31185 10.8161 9.40709 10.8508 9.50523 10.8749L9.82282 10.9529L10.4146 11.0604L10.8006 11.1345C11.018 11.1762 11.2298 11.2435 11.4315 11.3348L11.484 11.3585C11.6954 11.4542 11.892 11.5798 12.0676 11.7315L12.0946 11.7548C12.2652 11.9022 12.4121 12.075 12.53 12.2673C12.6898 12.5278 12.7933 12.8189 12.8338 13.1219L12.8422 13.1851C12.8687 13.3836 12.8693 13.5847 12.8437 13.7833L12.8414 13.8012C12.7939 14.1706 12.6547 14.5222 12.4364 14.8239C12.2679 15.0569 12.0559 15.255 11.8121 15.4075L11.768 15.435C11.5581 15.5663 11.3299 15.6656 11.0908 15.7297L10.9983 15.7545C10.9574 15.7655 10.9163 15.7756 10.875 15.7849V16C10.875 16.4832 10.4832 16.875 10 16.875C9.51675 16.875 9.125 16.4832 9.125 16V15.7387C8.97005 15.6974 8.81815 15.6446 8.67057 15.5808L8.59752 15.5492C8.42885 15.4763 8.26857 15.3854 8.11949 15.278C7.80584 15.052 7.54781 14.7575 7.365 14.4168L7.29586 14.288C7.06733 13.8622 7.22725 13.3318 7.65305 13.1033C8.07885 12.8747 8.60928 13.0347 8.83781 13.4605L8.90695 13.5893C8.96403 13.6956 9.0446 13.7876 9.14253 13.8581C9.18908 13.8917 9.23913 13.9201 9.29179 13.9428L9.36484 13.9744C9.49573 14.031 9.63389 14.0689 9.7753 14.0872L9.87263 14.0997C9.98645 14.1144 10.1014 14.1185 10.216 14.112L10.2646 14.1093C10.3594 14.1039 10.4534 14.0888 10.5451 14.0642L10.6376 14.0394C10.7091 14.0202 10.7774 13.9905 10.8401 13.9513L10.8842 13.9237C10.9366 13.8909 10.9823 13.8483 11.0185 13.7982C11.0655 13.7332 11.0955 13.6575 11.1057 13.578L11.108 13.5602C11.1141 13.5127 11.114 13.4645 11.1076 13.417L11.0992 13.3538C11.0911 13.293 11.0703 13.2345 11.0382 13.1822C11.0145 13.1436 10.985 13.1089 10.9508 13.0793L10.9238 13.056C10.8752 13.014 10.8208 12.9793 10.7624 12.9528L10.7098 12.929C10.6334 12.8944 10.5531 12.8689 10.4707 12.8531L10.089 12.7799L9.45747 12.6651L9.08797 12.5744C8.86703 12.5202 8.65262 12.4422 8.4485 12.3417L8.32967 12.2832C8.16831 12.2038 8.01773 12.1042 7.88158 11.9866L7.86492 11.9723C7.54845 11.6991 7.32331 11.3355 7.21985 10.9304C7.14174 10.6246 7.13549 10.3048 7.20159 9.9962L7.20466 9.98189C7.2715 9.6698 7.40837 9.37697 7.60493 9.12551L7.60982 9.11926C7.75364 8.93527 7.92658 8.77605 8.1218 8.64789L8.18668 8.6053C8.44209 8.43763 8.72493 8.31606 9.02235 8.2461L9.08418 8.23156L9.125 8.22226V8C9.125 7.51675 9.51675 7.125 10 7.125Z"
        }));
    }));
    var i = [ "default", "outlined", "filled" ];
    var c = function C(e) {
        return i.indexOf(e) >= 0;
    };
    var d = function C(e) {
        return e === "default" || e && !c(e) ? "outlined" : e;
    };
    /**
     * @description Variable token that is used in Dashboard Studio
Data Type
coin, dollar mark, money, dynamic variable parameter, search result, eval
     * 
     * 
     * @variants outlined,filled
     */    var f = function C(e) {
        var n = e.children, o = e.variant, i = o === void 0 ? "default" : o, c = a(e, [ "children", "variant" ]);
        var f = d(i);
        var v = "token-".concat(f);
        var s = (0, r.useContext)(l.IconContext);
        var p = u.get(f);
        if (false) {}
        if (s && p) {
            var m = s.toRender, y = s.addIcon;
            y(v, p());
            if (!m) {
                return null;
            }
        }
        
        return t().createElement(L(), c, n, s ?  t().createElement("use", {
            href: "#".concat(v)
        }) : !!p && p());
    };
    /* harmony default export */    const v = f;
    module.exports = e;
    /******/})();