/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/    (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ e.n = r => {
            /******/ var n = r && r.__esModule ? 
            /******/ () => r["default"]
            /******/ : () => r
            /******/;
            e.d(n, {
                a: n
            });
            /******/            return n;
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/    (() => {
        /******/ // define getter functions for harmony exports
        /******/ e.d = (r, n) => {
            /******/ for (var t in n) {
                /******/ if (e.o(n, t) && !e.o(r, t)) {
                    /******/ Object.defineProperty(r, t, {
                        enumerable: true,
                        get: n[t]
                    });
                    /******/                }
                /******/            }
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/    (() => {
        /******/ e.o = (e, r) => Object.prototype.hasOwnProperty.call(e, r)
        /******/;
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/    (() => {
        /******/ // define __esModule on exports
        /******/ e.r = e => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                });
                /******/            }
            /******/            Object.defineProperty(e, "__esModule", {
                value: true
            });
            /******/        };
        /******/    })();
    /******/
    /************************************************************************/    var r = {};
    // ESM COMPAT FLAG
        e.r(r);
    // EXPORTS
        e.d(r, {
        AnimationToggleContext: () => /* reexport */ u,
        AnimationToggleProvider: () => /* reexport */ h,
        default: () => /* reexport */ b,
        useAnimationToggle: () => /* reexport */ v
    });
    // CONCATENATED MODULE: external "react"
    const n = require("react");
    var t =  e.n(n);
    // CONCATENATED MODULE: external "prop-types"
    const o = require("prop-types");
    var a =  e.n(o);
    // CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggleContext.tsx
    /**
 * A React context used to control whether animations are enabled or disabled.
 * Prefer `useAnimationToggle` or `AnimationToggle` over consuming this context
 * directly, since they take the user's reduced motion preference into account.
 * This context should only be used if direct access to the animation setting
 * is required. The context type is `Boolean` and defaults to `true`.
 *
 * @public
 */
    var u =  t().createContext(true);
    // CONCATENATED MODULE: ./src/AnimationToggle/useAnimationToggle.tsx
    function i(e, r) {
        return s(e) || d(e, r) || c(e, r) || l();
    }
    function l() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function c(e, r) {
        if (e) {
            if ("string" == typeof e) return f(e, r);
            var n = {}.toString.call(e).slice(8, -1);
            return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? f(e, r) : void 0;
        }
    }
    function f(e, r) {
        (null == r || r > e.length) && (r = e.length);
        for (var n = 0, t = Array(r); n < r; n++) {
            t[n] = e[n];
        }
        return t;
    }
    function d(e, r) {
        var n = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
        if (null != n) {
            var t, o, a, u, i = [], l = !0, c = !1;
            try {
                if (a = (n = n.call(e)).next, 0 === r) {
                    if (Object(n) !== n) return;
                    l = !1;
                } else for (;!(l = (t = a.call(n)).done) && (i.push(t.value), i.length !== r); l = !0) {
                }
            } catch (e) {
                c = !0, o = e;
            } finally {
                try {
                    if (!l && null != n["return"] && (u = n["return"](), Object(u) !== u)) return;
                } finally {
                    if (c) throw o;
                }
            }
            return i;
        }
    }
    function s(e) {
        if (Array.isArray(e)) return e;
    }
    /**
 * A React hook that combines the animation setting (see `AnimationToggleProvider`)
 * and the user's reduced motion preference into one value.
 *
 * @returns {string} `'off'` if animations are disabled. If animations are enabled
 * and the user prefers reduced motion, `'reduced'` is returned, `'on'` otherwise.
 * @public
 */    var v = function e() {
        var r = (0, n.useContext)(u);
        var t = "screen and (prefers-reduced-motion: reduce)";
        var o = typeof window !== "undefined" && !!window.matchMedia;
        var a = (0, n.useState)(o && window.matchMedia(t).matches), l = i(a, 2), c = l[0], f = l[1];
        (0, n.useEffect)((function() {
            if (o) {
                var e = window.matchMedia(t);
                var r = function r() {
                    f(e.matches);
                };
                e.addListener(r);
                return function() {
                    e.removeListener(r);
                };
            }
            return undefined;
        }), [ o, t ]);
        if (r) {
            return c ? "reduced" : "on";
        }
        return "off";
    };
    // CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggle.tsx
    var m = function e(r) {
        return typeof r === "function" ? r() : r;
    };
    var y = {
        on: a().oneOfType([ a().node, a().func ]).isRequired,
        off: a().oneOfType([ a().node, a().func ]).isRequired,
        reduced: a().oneOfType([ a().node, a().func ])
    };
    /**
 * Used to allow animation to be externally controlled through a provider or user preference.
 */    function p(e) {
        var r = e.on, n = e.off, o = e.reduced;
        var a = v();
        if (a === "on") {
            
            return t().createElement(t().Fragment, null, m(r));
        }
        if (a === "reduced" && o) {
            
            return t().createElement(t().Fragment, null, m(o));
        }
        
        return t().createElement(t().Fragment, null, m(n));
        // react-docgen ignores components that don't use JSX/React.createElement.
        // the following line forces detection:
        // eslint-disable-next-line react/jsx-no-useless-fragment, no-unreachable
                
        return t().createElement(t().Fragment, null);
    }
    p.propTypes = y;
    /* harmony default export */    const b = p;
    // CONCATENATED MODULE: ./src/AnimationToggle/AnimationToggleProvider.tsx
    var g = {
        children: a().node,
        enabled: a().bool
    };
    /**
 * Used to provide a setting to enable or disable animation.
 */    var h = function e(r) {
        var n = r.children, o = r.enabled, a = o === void 0 ? false : o;
        
        return t().createElement(u.Provider, {
            value: a
        }, n);
    };
    h.propTypes = g;
    // CONCATENATED MODULE: ./src/AnimationToggle/index.ts
    module.exports = r;
    /******/})();