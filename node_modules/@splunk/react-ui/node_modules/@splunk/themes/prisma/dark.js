"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * ## Background colors
 * Background colors should be used only for backgrounds of higher level sections & containers of a UI.
 *
 * @colorSet verbose
 */

var backgroundColors = {
  backgroundColorPopup: '#27292e',
  backgroundColorSection: '#1a1c20',
  backgroundColorSidebar: '#0b0c0e',
  backgroundColorPage: '#111215',
  backgroundColorNavigation: '#08090a',
  backgroundColorFloating: '#ffffff',
  backgroundColorDialog: '#1e2024',
  backgroundColorScrim: 'rgba(0, 0, 0, 0.8)'
};

/**
 * ## Content colors
 * Content colors should be used for text, icons and dividers.
 *
 * @colorSet verbose
 */

var contentColors = {
  contentColorActive: '#fafafa',
  contentColorDefault: '#b5b5b5',
  contentColorDisabled: '#6b6b6b',
  contentColorInverted: '#000000',
  contentColorMuted: '#909090'
};

/**
 * ## Interactive colors
 * Interactive colors are specifically chosen for borders and backgrounds of controls and other interactive content.
 * "Overlay" colors are intended to be placed over the default background color, such as interactiveColorPrimary.
 * If the default background color is not transparent, the `blend` mixin can be used to create a new color that combines the two.
 *
 * @colorSet verbose
 */

var interactiveColors = {
  interactiveColorPrimary: '#3993FF',
  interactiveColorBorder: 'rgba(255, 255, 255, 0.5)',
  interactiveColorBorderActive: 'rgba(225, 225, 225, 0.5)',
  interactiveColorBorderHover: 'rgba(255, 255, 255, 0.7)',
  interactiveColorBorderDisabled: 'rgba(255, 255, 255, 0.30)',
  interactiveColorOverlaySelected: 'rgba(255, 255, 255, 0.1)',
  interactiveColorOverlayHover: 'rgba(255, 255, 255, 0.05)',
  interactiveColorOverlayActive: 'rgba(0, 0, 0, 0.2)',
  interactiveColorOverlayDrag: 'rgba(57, 147, 255, 0.16)',
  interactiveColorBackground: '#272a2f',
  interactiveColorBackgroundDisabled: 'rgba(255, 255, 255, 0.15)'
};

/**
 * ## Neutral colors
 * Neutrals are used for dividers and as backup colors that can sparingly be used for cases, when the other defined colors are not enough.
 *
 * @colorSet verbose
 */

var neutralColors = {
  black: '#000000',
  neutral100: '#33343b',
  neutral200: '#43454b',
  neutral300: '#505158',
  neutral400: '#818285',
  neutral500: '#acacad',
  white: '#ffffff'
};

/**
 * ## Status colors
 * Status colors are reserved for communicating urgency and severity associated with data objects and to categorize the visual communication of system responses.
 *
 * @colorSet verbose
 */
var statusColors = {
  statusColorInfo: '#61cafa',
  statusColorInfoWeak: (0, _tinycolor["default"])('#61cafa').darken(10).toHexString(),
  statusColorInfoStrong: (0, _tinycolor["default"])('#61cafa').lighten(10).toHexString(),
  statusColorNormal: '#85f415',
  statusColorNormalWeak: (0, _tinycolor["default"])('#85f415').darken(10).toHexString(),
  statusColorNormalStrong: (0, _tinycolor["default"])('#85f415').lighten(10).toHexString(),
  statusColorLow: '#2cbda3',
  statusColorLowWeak: (0, _tinycolor["default"])('#2cbda3').darken(10).toHexString(),
  statusColorLowStrong: (0, _tinycolor["default"])('#2cbda3').lighten(10).toHexString(),
  statusColorMedium: '#f49106',
  statusColorMediumWeak: (0, _tinycolor["default"])('#f49106').darken(10).toHexString(),
  statusColorMediumStrong: (0, _tinycolor["default"])('#f49106').lighten(10).toHexString(),
  statusColorHigh: '#ff4242',
  statusColorHighWeak: (0, _tinycolor["default"])('#ff4242').darken(10).toHexString(),
  statusColorHighStrong: (0, _tinycolor["default"])('#ff4242').lighten(10).toHexString(),
  statusColorCritical: '#ff3361',
  statusColorCriticalWeak: (0, _tinycolor["default"])('#ff3361').darken(10).toHexString(),
  statusColorCriticalStrong: (0, _tinycolor["default"])('#ff3361').lighten(10).toHexString()
};

/**
 * ## Accent colors
 * Accent colors aid and categorize the visual communication of the system response.
 *
 * @colorSet verbose
 */
var accentColors = {
  accentColorPositive: statusColors.statusColorNormal,
  accentColorWarning: statusColors.statusColorMedium,
  accentColorAlert: '#f0581f',
  accentColorNegative: statusColors.statusColorHigh
};

/**
 * ## Elevation shadows
 *
 * @shadowSet
 *
 */
var elevationShadows = {
  embossShadow: '0px 1px 5px rgba(0, 0, 0, 0.35), 0px 0px 1px rgba(0, 0, 0, 0.35)',
  overlayShadow: '0px 26px 103px rgba(0, 0, 0, 0.64), 0px 11px 18px rgba(0, 0, 0, 0.32), 0px 3px 6px rgba(0, 0, 0, 0.3)',
  dragShadow: '0px 26px 103px rgba(0, 0, 0, 0.64), 0px 11px 18px rgba(0, 0, 0, 0.32), 0px 3px 6px rgba(0, 0, 0, 0.3)',
  modalShadow: '0px 50px 200px #000000, 0px 29px 66px rgba(0, 0, 0, 0.41), 0px 14px 47px rgba(0, 0, 0, 0.17), 0px 5px 10px rgba(0, 0, 0, 0.15)'
};

/**
 * ## Syntax colors
 * Syntax colors are used only for code blocks.
 *
 * @colorSet verbose alphabetical
 */
var syntaxColors = {
  syntaxBlue: '#6cd0f0',
  syntaxBrown: '#fccf87',
  syntaxGray: '#909090',
  syntaxGreen: '#cef06c',
  syntaxOrange: '#f7933f',
  syntaxPink: '#f494e5',
  syntaxPurple: '#ab74f1',
  syntaxRed: '#e9627f',
  syntaxTeal: '#45d4ba'
};
var theme = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, accentColors), statusColors), elevationShadows), backgroundColors), contentColors), neutralColors), interactiveColors), syntaxColors);
var _default = theme;
exports["default"] = _default;