"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _dataViz = _interopRequireDefault(require("./dataViz"));
var _light = _interopRequireDefault(require("./light"));
var _dark = _interopRequireDefault(require("./dark"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function createPrismaBase(_ref) {
  var colorScheme = _ref.colorScheme;
  var colorSchemeVars = {
    light: _light["default"],
    dark: _dark["default"]
  }[colorScheme];

  /**
   * ## Misc. colors
   *
   * @colorSet verbose
   */
  var usageColors = {
    focusColor: colorSchemeVars.interactiveColorPrimary,
    transparent: 'transparent',
    linkColor: colorSchemeVars.interactiveColorPrimary
  };

  /**
   * ## Interactive state shadows
   *
   * @shadowSet
   *
   */
  var shadows = {
    hoverShadow: "0 0 0 2px ".concat(colorSchemeVars.backgroundColorPage, ", 0 0 0 5px ").concat(colorSchemeVars.interactiveColorOverlayHover),
    focusShadow: "0 0 0 2px ".concat(colorSchemeVars.backgroundColorPage, ", 0 0 0 5px ").concat(usageColors.focusColor),
    focusShadowInset: "inset 0 0 0 3px ".concat(usageColors.focusColor)
  };

  /**
   * ## Borders
   *
   * @borderSet
   *
   */
  var borders = {
    activeBorder: "double ".concat(colorSchemeVars.interactiveColorBorderActive),
    borderColor: "".concat(colorSchemeVars.neutral200),
    borderColorWeak: "".concat(colorSchemeVars.neutral100),
    borderColorStrong: "".concat(colorSchemeVars.neutral300)
  };

  /**
   * ## Backgrounds
   *
   * @colorSet verbose
   */
  var backgrounds = {
    draggableBackground: "radial-gradient(circle at 1px 1px, ".concat(colorSchemeVars.contentColorMuted, ", ").concat(colorSchemeVars.contentColorMuted, " 1px, transparent 1px) 0 0 / 4px 6px")
  };
  var sansFontFamily = "'Splunk Platform Sans', 'Splunk Data Sans', Roboto, Droid, 'Helvetica Neue', Helvetica, Arial, sans-serif";
  /**
   * ## Font family
   *
   * @valueSet
   */
  var fontFamily = {
    sansFontFamily: sansFontFamily,
    serifFontFamily: "Georgia, 'Times New Roman', Times, serif",
    monoFontFamily: "'Splunk Platform Mono', 'Roboto Mono', Consolas, 'Droid Sans Mono', Monaco, 'Courier New', Courier, monospace",
    fontFamily: sansFontFamily
  };

  /**
   * ## Font weights
   *
   * Based on [common weight name mappings](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#common_weight_name_mapping)
   *
   * @valueSet
   */
  var fontWeights = {
    fontWeightLight: 300,
    fontWeightNormal: 400,
    fontWeightSemiBold: 500,
    fontWeightBold: 700,
    fontWeightHeavy: 800,
    fontWeightExtraBold: 900
  };

  /**
   * ## Layers
   * If a variable does not suit your purpose, set a value relatively, such as zindexModal +1.
   *
   * @valueSet
   */
  var zindexes = {
    zindexLayer: 1000,
    zindexFixedNavbar: 1030,
    zindexModalBackdrop: 1040,
    zindexModal: 1050,
    zindexPopover: 1060,
    zindexToastMessages: 2000
  };
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, fontFamily), fontWeights), usageColors), _dataViz["default"]), shadows), borders), backgrounds), zindexes);
}
var _default = createPrismaBase;
exports["default"] = _default;