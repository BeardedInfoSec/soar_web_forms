"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearVariablesCache = exports["default"] = void 0;
var _memoize = _interopRequireDefault(require("lodash/memoize"));
var _getTheme = _interopRequireDefault(require("./getTheme"));
var _utils = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * @file
 * ## Theme Variables
 * All variables are available in one util for use in styled-component templates.
 * Each variable is a function which styled-components will call with the available theme information.
 * If there is no SplunkThemeProvider, variables will default to Prisma Dark Comfortable.
 *
 * Variables will return `undefined` if the variable does not exist in the current theme.
 * ```
 * import variables from '@splunk/themes/variables';
 * import styled from 'styled-components';
 * ...
 * const PrismaWrapper = styled.div`
 *     color: ${variables.contentColorDefault};
 * `;
 * ```
 *
 * Variables may also be imported individually.
 * ```
 * import { contentColorDefault } from '@splunk/themes/variables';
 * import styled from 'styled-components';
 * ...
 * const PrismaWrapper = styled.div`
 *     color: ${contentColorDefault};
 * `;
 * ```
 *
 * This function must be used in conjunction with `pick` if different variables are needed in different themes.
 * ```
 * import { pick, variables } from '@splunk/themes';
 * import styled from 'styled-components';
 *
 * const Wrapper = styled.div`
 *     color: ${pick({
 *          enterprise: variables.textColor,
 *          prisma: variables.contentColorDefault
 *     })};
 * `;
 * ```
 * ## Custom Variables
 * Custom variables cannot be added to this package. However, `pick()` can be used to create sets of
 * theme variables. These can be then be imported separately and used as above.
 * ```
 * import pick from '@splunk/themes/pick';
 *
 * export const myVariables = {
 *    orange: pick({
 *        light: '#C80',
 *        dark: '#F90',
 *    }),
 *    space: pick({
 *        enterprise: '20px',
 *        prisma: {
 *            comfortable: '16px',
 *            compact: '12px',
 *        },
 *    }),
 * };
 * ```
 */
var getThemeVariable = function getThemeVariable(name, settings, customizer) {
  var theme = (0, _utils.getCustomizedTheme)(settings, customizer);
  var returnValue = theme[name];
  if (false && typeof returnValue === 'undefined') {
    // eslint-disable-next-line no-console
    console.warn("The variable '".concat(String(name), "' does not exist in the theme '").concat(theme.family, " ").concat(theme.colorScheme, " ").concat(theme.density, "'."));
  }
  return returnValue;
};
var getThemeVariableMemoized = (0, _memoize["default"])(getThemeVariable, function (name, _ref, customizer) {
  var family = _ref.family,
    colorScheme = _ref.colorScheme,
    density = _ref.density;
  return "".concat(name, "-").concat(family, "-").concat(colorScheme, "-").concat(density, "-").concat(!!customizer);
});
var clearVariablesCache = function clearVariablesCache() {
  var _getThemeVariableMemo, _getThemeVariableMemo2;
  return (_getThemeVariableMemo = (_getThemeVariableMemo2 = getThemeVariableMemoized.cache).clear) === null || _getThemeVariableMemo === void 0 ? void 0 : _getThemeVariableMemo.call(_getThemeVariableMemo2);
};

/**
 * The `get` helper will insert a theme variable into a `styled-components` css template.
 * Note, this will return `undefined` if the variable does not exist in the current theme.
 * This function must be used in conjunction with `pick` if different variables are needed in different themes.
 * ```
 * import get from '@splunk/themes/get';
 * ...
 * const Wrapper = styled.div`
 *     color: ${get('contentColorDefaultDefault')}; // prisma theme only
 * `;
 * ```
 * @param {string} name - The name of the variable to get from the current theme configuration.
 * @returns {function} The returned function is called by `styled-components`, which provides the theme context.
 * @private
 */
exports.clearVariablesCache = clearVariablesCache;
var get = function get(name) {
  return function (_ref2) {
    var _ref2$theme = _ref2.theme;
    _ref2$theme = _ref2$theme === void 0 ? {} : _ref2$theme;
    var splunkThemeV1 = _ref2$theme.splunkThemeV1;
    var _ref3 = splunkThemeV1 || {},
      family = _ref3.family,
      colorScheme = _ref3.colorScheme,
      density = _ref3.density,
      customizer = _ref3.customizer;
    return getThemeVariableMemoized(name, {
      family: family,
      colorScheme: colorScheme,
      density: density
    }, customizer);
  };
};
var variableNames = Object.keys(_objectSpread(_objectSpread({}, (0, _getTheme["default"])({
  family: 'prisma'
})), (0, _getTheme["default"])({
  family: 'enterprise'
})));

// each variable is converted to a get() function.
// TS: The AllVariables type allows safe access to all variables shared across themes,
// and unsafe access to variables exclusive to Enterprise or Prisma
var variables = variableNames.reduce(function (acc, currentValue) {
  // using defineProperty instead of acc[currentValue] to work around readonly issue
  Object.defineProperty(acc, currentValue, {
    value: get(currentValue)
  });
  return acc;
}, {});
var _default = variables;
exports["default"] = _default;