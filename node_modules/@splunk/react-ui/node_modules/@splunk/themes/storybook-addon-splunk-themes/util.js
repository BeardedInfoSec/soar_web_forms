"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeOptionsFromContext = exports.getMergedTheme = exports.normalizeThemeOptions = void 0;
var _constants = require("./constants");
var _themeOptions = require("./themeOptions");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) { n[e] = r[e]; } return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0) { ; } } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var normalizeThemeOptions = function normalizeThemeOptions() {
  var paramOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var globalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _objectSpread(_objectSpread({}, paramOptions), globalOptions);
};

// merge the existing theme with the newly selected theme
// this functon only allows the most recently-selectd "both" option to persist
// because allowing more than one "both" leads to an unwieldy visualization
exports.normalizeThemeOptions = normalizeThemeOptions;
var getMergedTheme = function getMergedTheme(globalsTheme, newTheme) {
  var firstBothEntry = Object.entries(newTheme).find(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      value = _ref2[1];
    return value === 'both';
  });
  var _ref3 = firstBothEntry || [],
    _ref4 = _slicedToArray(_ref3, 1),
    firstBothOption = _ref4[0];
  var finalValue;

  // only allow "both" for a single theme setting; if a new one is passed, remove the old one
  var mergedTheme = Object.entries(_themeOptions.themeOptions).reduce(function (themeAccum, _ref5) {
    var _ref6 = _slicedToArray(_ref5, 1),
      key = _ref6[0];
    if ((0, _themeOptions.isThemeOptionKey)(key)) {
      if ((globalsTheme === null || globalsTheme === void 0 ? void 0 : globalsTheme[key]) === 'both' && firstBothOption != null && key !== firstBothOption) {
        var defaultThemeOptionValue = _themeOptions.themeOptions[key].values[0];
        finalValue = defaultThemeOptionValue;
      } else {
        finalValue = newTheme[key] || (globalsTheme === null || globalsTheme === void 0 ? void 0 : globalsTheme[key]);
      }
      if (finalValue != null) {
        return _objectSpread(_objectSpread({}, themeAccum), {}, _defineProperty({}, key, finalValue));
      }
    }
    return themeAccum;
  }, {});
  return mergedTheme;
};
exports.getMergedTheme = getMergedTheme;
var getThemeOptionsFromContext = function getThemeOptionsFromContext(context) {
  var globals = context.globals,
    parameters = context.parameters;
  var globalsTheme = globals[_constants.PARAM_KEY];
  var themesConfig = parameters[_constants.PARAM_KEY];
  return normalizeThemeOptions(themesConfig, globalsTheme);
};
exports.getThemeOptionsFromContext = getThemeOptionsFromContext;