"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typographyVariants = exports["default"] = void 0;
var _styledComponents = require("styled-components");
var _merge = _interopRequireDefault(require("lodash/merge"));
var _variables = _interopRequireDefault(require("../variables"));
var _pick = _interopRequireDefault(require("../pick"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n                    margin: 0;\n                    padding: 0;\n                "]);
  _templateObject2 = function _templateObject2() {
    return data;
  };
  return data;
}
function _templateObject() {
  var data = _taggedTemplateLiteral(["\n        ", "\n\n        color: ", ";\n        font-family: ", ";\n        font-size: ", ";\n        font-weight: ", ";\n        line-height: ", ";\n    "]);
  _templateObject = function _templateObject() {
    return data;
  };
  return data;
}
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var typographyVariants = ['body', 'title1', 'title2', 'title3', 'title4', 'title5', 'title6', 'title7', 'largeBody', 'smallBody', 'footnote', 'monoBody', 'monoSmallBody'];

// Keep in sync with react-ui/Typography for documentation
// TODO: SUI-5042 Improve docs-gen to render extended 3rd party types
// TODO: SUI-5043 UtilPage doesn't render public types
exports.typographyVariants = typographyVariants;
function isTypographyVariant(s) {
  if (typeof s !== 'string') {
    return false;
  }
  return typographyVariants.includes(s);
}
function getStylesForVariant(variant) {
  var color = _variables["default"].contentColorDefault;
  var family = _variables["default"].fontFamily;
  var lineHeight = _variables["default"].lineHeight; // eslint-disable-line prefer-destructuring
  var size = _variables["default"].fontSize;
  var weight = 'normal';

  // TODO: After sections are removed from Heading update HeadingStyles accordingly to preserve section styles as typography variants SUI-5268
  switch (variant) {
    case 'title1':
      color = _variables["default"].contentColorActive;
      lineHeight = (0, _pick["default"])({
        enterprise: '20px',
        prisma: '48px'
      });
      size = (0, _pick["default"])({
        enterprise: '24px',
        prisma: '36px'
      });
      weight = (0, _pick["default"])({
        enterprise: '500',
        prisma: _variables["default"].fontWeightBold
      });
      break;
    case 'title2':
      color = _variables["default"].contentColorActive;
      lineHeight = (0, _pick["default"])({
        enterprise: '20px',
        prisma: '24px'
      });
      size = (0, _pick["default"])({
        enterprise: '18px',
        prisma: '24px'
      });
      weight = (0, _pick["default"])({
        enterprise: '500',
        prisma: _variables["default"].fontWeightBold
      });
      break;
    case 'title3':
      color = _variables["default"].contentColorActive;
      lineHeight = (0, _pick["default"])({
        enterprise: '20px',
        prisma: '24px'
      });
      size = (0, _pick["default"])({
        enterprise: '16px',
        prisma: '20px'
      });
      weight = (0, _pick["default"])({
        enterprise: '500',
        prisma: _variables["default"].fontWeightBold
      });
      break;
    case 'title4':
      color = _variables["default"].contentColorActive;
      lineHeight = (0, _pick["default"])({
        enterprise: '20px',
        prisma: '24px'
      });
      size = (0, _pick["default"])({
        enterprise: _variables["default"].fontSize,
        prisma: '16px'
      });
      weight = _variables["default"].fontWeightBold;
      break;
    case 'title5':
      color = _variables["default"].contentColorActive;
      lineHeight = _variables["default"].lineHeight;
      size = (0, _pick["default"])({
        enterprise: '12px',
        prisma: _variables["default"].fontSize
      });
      weight = (0, _pick["default"])({
        enterprise: _variables["default"].fontWeightSemiBold,
        prisma: _variables["default"].fontWeightBold
      });
      break;
    case 'title6':
      color = _variables["default"].contentColorActive;
      lineHeight = (0, _pick["default"])({
        enterprise: _variables["default"].lineHeight,
        prisma: '16px'
      });
      size = (0, _pick["default"])({
        enterprise: '12px',
        prisma: '13px'
      });
      weight = _variables["default"].fontWeightSemiBold;
      break;
    case 'title7':
      color = _variables["default"].contentColorActive;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = _variables["default"].fontWeightSemiBold;
      break;
    case 'largeBody':
      color = _variables["default"].contentColorDefault;
      lineHeight = '24px';
      size = _variables["default"].fontSizeLarge;
      weight = 'normal';
      break;
    case 'smallBody':
      color = _variables["default"].contentColorDefault;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = 'normal';
      break;
    case 'footnote':
      color = _variables["default"].contentColorDefault;
      lineHeight = '13px';
      size = '10px';
      weight = 'normal';
      break;
    case 'monoBody':
      family = _variables["default"].monoFontFamily;
      break;
    case 'monoSmallBody':
      color = _variables["default"].contentColorDefault;
      family = _variables["default"].monoFontFamily;
      lineHeight = '16px';
      size = _variables["default"].fontSizeSmall;
      weight = 'normal';
      break;
    case 'body':
      // Theme defaults set the 'body' style
      break;
    default:
      {
        if (false) {
          // eslint-disable-next-line no-console
          console.log("Unknown typography variant, ".concat(variant, ". Using default values for theme."));
        }
        // Make sure this "never" happens https://www.typescriptlang.org/docs/handbook/2/narrowing.html#exhaustiveness-checking
        var exhaustiveCheck = variant;
        return exhaustiveCheck;
      }
  }
  return {
    color: color,
    family: family,
    size: size,
    weight: weight,
    lineHeight: lineHeight,
    withReset: true
  };
}
var colorPropToVariableMap = {
  active: _variables["default"].contentColorActive,
  "default": _variables["default"].contentColorDefault,
  disabled: _variables["default"].contentColorDisabled,
  inverted: _variables["default"].contentColorInverted,
  muted: _variables["default"].contentColorMuted,
  inherit: 'inherit'
};
var familyPropToVariableMap = {
  sansSerif: _variables["default"].sansFontFamily,
  monospace: _variables["default"].monoFontFamily
};

// As defined by [font-weight | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#common_weight_name_mapping)
var weightPropToValueMap = {
  light: _variables["default"].fontWeightLight,
  normal: _variables["default"].fontWeightNormal,
  semiBold: _variables["default"].fontWeightSemiBold,
  bold: _variables["default"].fontWeightBold,
  extraBold: _variables["default"].fontWeightExtraBold,
  heavy: _variables["default"].fontWeightHeavy
};

/**
 * A mixin for styling text content using predefined typography variants
 * and/or customizing font-settings with system parameters: e.g. size, weight, font-family.
 *
 * The default variant is `body` and will be used if no variant or settings
 * are given: i.e. `typography()` or `typography({})`.
 * Variants have the reset applied by default.
 *
 *  ##### Example
 *  ```js
 *  import styled from 'styled-components';
 *  import { typography } from '@splunk/themes/mixins';
 *
 *  const MyTitle = styled.h1`
 *      ${typography('title1')};
 *  `;
 *
 *  const MyCustomizedTitle = styled.h1`
 *      ${typography('title1', { color: 'inverted' })};
 *  `;
 *
 *  const CustomTitle = styled.h1`
 *      ${typography({size: 56, weight: 'light', color: 'inverted' })};
 *  `;
 *  ```
 * @name typography
 * @kind function
 * @param {string} [variant] Use a predefined typography variant:
 *  `'body'`,
 *  `'title1'`,
 *  `'title2'`,
 *  `'title3'`,
 *  `'title4'`,
 *  `'title5'`,
 *  `'title6'`,
 *  `'title7'`,
 *  `'largeBody'`,
 *  `'smallBody'`,
 *  `'footnote'`,
 *  `'monoBody'`, or
 *  `'monoSmallBody'`,
 * @param {object} [typographyParams] Customize the font settings or element using system values for: `family`, `size`, `lineHeight`, `color`, and `weight`.
 * Default margin and padding can be removed with `withReset`.
 * @public
 */

function typography(variantOrParams, additionalParams) {
  var variant = isTypographyVariant(variantOrParams) ? variantOrParams : undefined;
  var params;
  if (variant && additionalParams !== undefined) {
    params = additionalParams;
  } else if (variant === undefined && _typeof(variantOrParams) === 'object' && additionalParams === undefined) {
    params = variantOrParams;
  } else {
    params = {};
  }
  var variantParams = variant ? getStylesForVariant(variant) : {};

  // Transform params to be ready for css literal below: i.e size="24" -> "24px"
  var transformedParams = _objectSpread(_objectSpread({}, params), {}, {
    size: params.size ? "".concat(params.size, "px") : undefined,
    lineHeight: params.lineHeight ? "".concat(params.lineHeight, "px") : undefined,
    color: params.color ? colorPropToVariableMap[params.color] : undefined,
    family: params.family ? familyPropToVariableMap[params.family] : undefined,
    weight: params.weight ? weightPropToValueMap[params.weight] : undefined
  });
  var defaultTypographyParams = {
    color: _variables["default"].contentColorDefault,
    family: _variables["default"].fontFamily,
    size: _variables["default"].fontSize,
    weight: 'normal',
    lineHeight: _variables["default"].lineHeight,
    withReset: false
  };
  var finalParams = (0, _merge["default"])(defaultTypographyParams, variantParams, transformedParams);
  return function () {
    return (0, _styledComponents.css)(_templateObject(), function () {
      return finalParams.withReset && (0, _styledComponents.css)(_templateObject2());
    }, finalParams.color, finalParams.family, finalParams.size, finalParams.weight, finalParams.lineHeight);
  };
}
var _default = typography;
exports["default"] = _default;