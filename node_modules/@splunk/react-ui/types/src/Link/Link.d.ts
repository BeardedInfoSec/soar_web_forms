import React, { Component } from 'react';
import { legacyRefMode } from '@splunk/react-ui/Dropdown';
import { ClassComponentProps } from '../utils/types';
interface LinkPropsBase {
    /**
     * Links may need to be rendered as "disabled": e.g. last link in a breadcrumb. Disabled links, must have the `to` (ideally to '') and `disabled` props set.
     *  @private
     */
    allowDisabledLink?: boolean;
    children?: React.ReactNode;
    /**
     * Adds a disabled attribute and prevent clicking.
     */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement | HTMLAnchorElement>;
    /**
     * Open the "to" link in a new context, which is usually a new tab or window based on browser settings.
     *
     * An icon and a screen reader message is added to indicate this behavior to users.
     * The default message is "(Opens new window)"; this can be customized by passing
     * a string instead of boolean to `openInNewContext`.
     */
    openInNewContext?: boolean | string;
    /**
     * The URL or path to link to.
     */
    to?: string;
}
declare const defaultProps: Required<Pick<LinkPropsBase, 'disabled' | 'openInNewContext'>>;
type LinkLinkProps = ClassComponentProps<LinkPropsBase, typeof defaultProps, 'a', 'href'>;
type LinkButtonProps = ClassComponentProps<LinkPropsBase, typeof defaultProps, 'button'>;
type LinkProps = LinkLinkProps | LinkButtonProps;
/**
 * `Link` is a simple method for configuring `Button` for inline links. For more complex behaviors,
 * see the `Button` documentation.
 */
declare class Link extends Component<LinkProps> {
    private component;
    static propTypes: React.WeakValidationMap<LinkProps>;
    static defaultProps: Required<Pick<LinkPropsBase, "disabled" | "openInNewContext">>;
    static [legacyRefMode]: boolean;
    private handleMount;
    /**
     * Place focus on the link.
     */
    focus(): void;
    render(): JSX.Element;
}
export default Link;
