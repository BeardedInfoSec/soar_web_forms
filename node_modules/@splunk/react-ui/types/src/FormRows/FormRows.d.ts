import React, { Component } from 'react';
import Row from './Row';
import type { RowRequestRemoveHandler } from './Row';
import { ClassComponentProps } from '../utils/types';
/** @public */
type FormRowsRequestMoveHandler = (data: {
    fromIndex: number;
    toIndex: number;
}) => void;
interface FormRowsPropsBase {
    /** Label on the Add Row Button. Ignored when menu prop is defined. */
    addLabel?: string;
    /** @private */
    children?: React.ReactNode;
    /** Disable the add button, the remove button and the sort/drag action. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts, and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Header for the rows. */
    header?: React.ReactNode;
    /** Replaces Add Row Button with custom content or controls. */
    menu?: React.ReactNode;
    /** Callback when the "Add" button is clicked. If `onRequestAdd` is defined, 'onRequestRemove' should be defined in `<FormRows.Row>`. Neither should be defined for a reorder-only variant of `<FormRows>`. */
    onRequestAdd?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
    /** Callback when sort action completes. Omit this to make rows unsortable. */
    onRequestMove?: FormRowsRequestMoveHandler;
}
declare const defaultProps: Required<Pick<FormRowsPropsBase, 'addLabel' | 'disabled' | 'header'>>;
type FormRowsProps = ClassComponentProps<FormRowsPropsBase, typeof defaultProps, 'div'>;
declare class FormRows extends Component<FormRowsProps, {}> {
    static propTypes: React.WeakValidationMap<FormRowsProps>;
    static defaultProps: Required<Pick<FormRowsPropsBase, "header" | "disabled" | "addLabel">>;
    static Row: typeof Row;
    static addRow: (element: React.ReactElement<any, string | React.JSXElementConstructor<any>>, items: React.ReactElement<any, string | React.JSXElementConstructor<any>>[]) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
    static moveRow: (fromIndex: number, toIndex: number, items: React.ReactElement<any, string | React.JSXElementConstructor<any>>[]) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
    static removeRow: (index: number, items: React.ReactElement<any, string | React.JSXElementConstructor<any>>[]) => React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
    private handleKeyDown;
    private handleSortEnd;
    render(): JSX.Element;
}
export default FormRows;
export { Row };
export type { FormRowsRequestMoveHandler, RowRequestRemoveHandler };
