import React from 'react';
import PropTypes from 'prop-types';
import { Divider, Heading } from '@splunk/react-ui/Menu';
import { TextBlurHandler, TextChangeHandler, TextFocusHandler } from '@splunk/react-ui/Text';
import Option from './OptionBase';
import { ComponentProps } from '../utils/types';
type SelectBaseFilterChangeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLSpanElement> | React.KeyboardEvent, data: {
    keyword: string;
}) => void;
type SelectBaseChangeReason = 'valueToggle' | 'selectAll' | 'clearAll';
type SelectBaseChangeHandler = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>, data: {
    name?: string;
    values: (string | number | boolean)[];
    reason: SelectBaseChangeReason;
}) => void;
type SelectBaseScrollBottomHandler = (event: React.UIEvent<HTMLDivElement> | React.KeyboardEvent<HTMLInputElement> | null) => void;
interface SelectBasePropsBase {
    /**
     * Whether or not to allow entered keyboard printable characters to match options.
     * Keymatching is disabled when using filtering, multiselect, or loading.
     */
    allowKeyMatching?: boolean;
    animateLoading?: boolean;
    /**
     * Change the style of the button or link.
     * @deprecatedValue 'primary'
     * The `primary` value is deprecated and will be removed in the next major version.
     * @themeNotes The `pill` appearance is deprecated and only supported in Enterprise themes. The `flat` and `toggle` appearances are deprecated and only supported in Prisma themes.
     */
    appearance?: 'default' | 'link' | 'primary' | 'pill' | 'toggle' | 'flat' | 'subtle';
    /**
     * Remove rounding from the left side of the toggle.
     */
    append?: boolean;
    /**
     * Allow the user to add arbitrary values.
     */
    allowNewValues?: boolean;
    /**
     * `children` should be `Multiselect.Option`, `Multiselect.Heading`, or
     * `Multiselect.Divider`.
     */
    children?: React.ReactNode;
    /**
     * The default placement of the dropdown menu. It might be rendered in a different direction
     * depending upon the space available.
     */
    defaultPlacement?: 'above' | 'below' | 'vertical';
    /**
     * Set this property instead of values to keep the values uncontrolled.
     */
    defaultValues?: (string | number | boolean)[];
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /** Disable adding and removing. */
    disabled?: boolean;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLButtonElement>;
    /** Display as in an error. */
    error?: boolean;
    /**
     * Determines whether to show the filter box. When true, the children are automatically
     * filtered based on the label. When controlled, the parent component must provide a
     * onFilterChange callback and update the children. This can also be used to fetch new
     * results. */
    filter?: boolean | 'controlled';
    /**
     * The footer message can show additional information, such as a truncation message.
     */
    footerMessage?: React.ReactNode;
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * An id for the input, which may be necessary for accessibility, such as for aria
     * attributes.
     */
    inputId?: string;
    /**
     * A React ref which is set to the input element when the component mounts and null when it unmounts.
     */
    inputRef?: React.Ref<HTMLInputElement>;
    isLoadingOptions?: boolean;
    /**
     * The id of the label.  This prop's value is set as the `aria-labelledby` attribute.
     * ControlGroup automatically sets this prop.
     */
    labelledBy?: string;
    /**
     * Text presented in the label for this field.
     * This prop's value is merged with the current value and set as the `aria-label` attribute.
     * If labelledBy is passed this prop is ignored.
     */
    labelText?: string;
    /**
     * The loading message to show when isLoadingOptions. */
    loadingMessage?: React.ReactNode;
    /**
     * Style properties to apply to the Menu. */
    menuStyle?: React.CSSProperties;
    /**
     * Allow multiple values to be selected.
     */
    multiple: boolean;
    /** The name is returned with onChange events, which can be used to identify the
     * control when multiple controls share an onChange callback. */
    name?: string;
    /**
     * The noOptionsMessage is shown when there are no children and not loading, such as when
     * there are no Options matching the filter. This can be customized to the type of content,
     * such as "No matching dashboards"; insert other content, such as an error message; or
     * communicate a minimum number of characters to enter to see results. */
    noOptionsMessage?: React.ReactNode;
    /**
     * A callback to receive the change events.  If values is set, this callback is required.
     * This must set the values prop to retain the change.
     */
    onChange?: SelectBaseChangeHandler;
    /**
     * A callback function invoked when the menu is scrolled.
     */
    onScroll?: React.UIEventHandler<Element>;
    /**
     * A callback function for loading additional list items.
     * Called when the list is scrolled to the bottom or all items in the list are visible.
     * This is called with an event argument if this is the result of a scroll.
     *
     * This should be set this to `null` when all items are loaded.
     */
    onScrollBottom?: SelectBaseScrollBottomHandler;
    /**
     * A callback with the change event and value of the filter box. Providing this callback and
     * setting the `filter` prop to `"controlled"` enables you to filter and update the children by other
     * criteria.
     */
    onFilterChange?: SelectBaseFilterChangeHandler;
    /**
     * A callback function invoked when the popover closes.
     */
    onClose?: () => void;
    /**
     * A callback function invoked when the popover opens.
     */
    onOpen?: () => void;
    /** @private. */
    required?: boolean;
    /**
     * If 'values' is undefined or don't match an item, the Button will display this text.
     */
    placeholder?: string;
    /**
     * When used outside of a control group, it can be useful to include the label on the toggle.
     */
    prefixLabel?: string;
    /**
     * Remove rounding from the left side of the toggle.
     */
    prepend?: boolean;
    /**
     * See `repositionMode` on `Popover` for details.
     */
    repositionMode?: 'none' | 'flip';
    /**
     * Determines how to display Select all/Clear all.
     */
    selectAllAppearance?: 'buttongroup' | 'checkbox';
    showSelectedValuesFirst?: 'nextOpen' | 'immediately' | 'never';
    /**
     * Places this string after the selected label.
     */
    suffixLabel?: string;
    /** Pressing tab while entering an input confirms the new value. Requires `allowNewValues`. */
    tabConfirmsNewValue?: boolean;
    /**
     * Values will be matched to one of the children to deduce the label and/or icon for the
     * toggle.
     */
    values?: (string | number | boolean)[];
    /**
     * @private Experimental. Use a virtualized `ResultsMenu` variant which will only render at most
     * `virtualization * 3` options in the DOM at any given time, and will have a type of infinite scroll behavior.
     * @throws if `virtualization` is defined but less than 2
     */
    virtualization?: number;
    /**
     * @private
     *
     * A toggle, such as a button or equivalent component that accepts `ref`, must be passed.
     * This prop is only supported for Select and Multiselect Compact.
     * `aria-haspopup`, `aria-expanded`, and `aria-controls` attributes are applied to the toggle to support accessibility.
     * The result of the `ref` placed on the toggle must be an instance of `HTMLElement`. Results that are instances
     * of class components are not supported. `Button`, `Clickable`, and `Link` are exempt from this restriction.
     * Also see ["Forwarding Refs"](https://reactjs.org/docs/forwarding-refs.html).
     */
    toggle?: React.ReactElement;
    /**
     * Controls whether the `children` or `label` of the selected `Option` is rendered on the toggle button.
     */
    toggleContent?: 'optionChildren' | 'optionLabel';
}
interface SelectBasePropsBaseControlled extends SelectBasePropsBase {
    defaultValues?: never;
    onChange: SelectBaseChangeHandler;
    values?: (string | number | boolean)[];
}
interface SelectBasePropsBaseUncontrolled extends SelectBasePropsBase {
    defaultValues?: (string | number | boolean)[];
    values?: never;
}
type SelectBaseProps = ComponentProps<SelectBasePropsBaseControlled | SelectBasePropsBaseUncontrolled, 'button'>;
type OptionElement = React.ReactElement<React.ComponentPropsWithRef<typeof Option>, typeof Option>;
type ChildrenElement = React.ReactElement<React.ComponentProps<typeof Divider | typeof Heading>, typeof Divider | typeof Heading> | OptionElement;
declare function isOption(child: ChildrenElement): child is OptionElement;
interface ControlsProps extends Pick<SelectBaseProps, 'inputId' | 'inputRef' | 'multiple' | 'selectAllAppearance'> {
    activeItemId: string;
    filterA11yId?: string;
    filterKeyword: string;
    hasChildren: boolean;
    menuListboxId: string;
    onClearAll: React.MouseEventHandler<HTMLButtonElement> | React.MouseEventHandler<HTMLAnchorElement>;
    onSelectAll: React.MouseEventHandler<HTMLButtonElement> | React.MouseEventHandler<HTMLAnchorElement>;
    onTextBlur: TextBlurHandler;
    onTextChange: TextChangeHandler;
    onTextFocus: TextFocusHandler;
    onTextKeyDown: React.KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>;
    optionSelection: React.MutableRefObject<'all' | 'some' | 'none'>;
    placement: 'above' | 'below' | 'left' | 'right' | 'misaligned' | null;
    textHasFocus: boolean;
}
declare const Controls: ({ activeItemId, filterA11yId, filterKeyword, hasChildren, inputId, inputRef, menuListboxId, multiple, onClearAll, onSelectAll, onTextBlur, onTextChange, onTextFocus, onTextKeyDown, optionSelection, placement, selectAllAppearance, textHasFocus, }: ControlsProps) => JSX.Element;
declare function SelectBase({ allowKeyMatching, animateLoading, appearance, append, allowNewValues, children, defaultPlacement, defaultValues, describedBy, disabled, elementRef, error, filter, footerMessage, inline, inputId, inputRef, isLoadingOptions, labelledBy, labelText, loadingMessage, menuStyle, multiple, name, noOptionsMessage, onChange, onScroll, onScrollBottom, onFilterChange, onClick, onClose, onOpen, required, placeholder, prefixLabel, prepend, repositionMode, selectAllAppearance, showSelectedValuesFirst, suffixLabel, tabConfirmsNewValue, values, virtualization, toggle, toggleContent, ...otherProps }: SelectBaseProps): JSX.Element;
declare namespace SelectBase {
    var propTypes: {
        allowKeyMatching: PropTypes.Requireable<boolean>;
        allowNewValues: PropTypes.Requireable<boolean>;
        animateLoading: PropTypes.Requireable<boolean>;
        appearance: PropTypes.Requireable<string>;
        append: PropTypes.Requireable<boolean>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        defaultPlacement: PropTypes.Requireable<string>;
        defaultValues: PropTypes.Requireable<any[]>;
        describedBy: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        error: PropTypes.Requireable<boolean>;
        filter: PropTypes.Requireable<string | boolean>;
        footerMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        inline: PropTypes.Requireable<boolean>;
        inputId: PropTypes.Requireable<string>;
        inputRef: PropTypes.Requireable<object>;
        isLoadingOptions: PropTypes.Requireable<boolean>;
        labelledBy: PropTypes.Requireable<string>;
        labelText: PropTypes.Requireable<string>;
        loadingMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        menuStyle: PropTypes.Requireable<object>;
        multiple: PropTypes.Requireable<boolean>;
        name: PropTypes.Requireable<string>;
        noOptionsMessage: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onFilterChange: PropTypes.Requireable<(...args: any[]) => any>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        onScrollBottom: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private. */
        required: PropTypes.Requireable<boolean>;
        placeholder: PropTypes.Requireable<string>;
        prefixLabel: PropTypes.Requireable<string>;
        prepend: PropTypes.Requireable<boolean>;
        repositionMode: PropTypes.Requireable<string>;
        selectAllAppearance: PropTypes.Requireable<string>;
        showSelectedValuesFirst: PropTypes.Requireable<string>;
        suffixLabel: PropTypes.Requireable<string>;
        tabConfirmsNewValue: PropTypes.Requireable<boolean>;
        toggle: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        toggleContent: PropTypes.Requireable<string>;
        values: PropTypes.Requireable<any[]>;
        /** @private. */
        virtualization: PropTypes.Requireable<number>;
    };
    var componentType: string;
    var Option: typeof import("./OptionBase").default;
    var Divider: typeof import("../Menu/Divider").default;
    var Heading: typeof import("../Menu/Heading").default;
}
export default SelectBase;
export { Controls, ChildrenElement, Divider, Heading, Option, SelectBaseChangeHandler, SelectBaseChangeReason, SelectBaseFilterChangeHandler, SelectBaseProps, isOption, };
