import React from 'react';
import PropTypes from 'prop-types';
import { SpringValue } from 'react-spring';
import { ComponentProps } from '../utils/types';
interface InnerPropsBase {
    children?: React.ReactNode;
    /** The scrollLeft to set on Mount. */
    defaultLeft?: number;
    /** The scrollTop to set on Mount. */
    defaultTop?: number;
    elementRef?: React.Ref<Element>;
    /** If set, scroll to this position on update. If null, ignore. */
    left?: SpringValue<number>;
    /** Prevent mouseWheel events from scrolling the page or other containers. */
    stopScrollPropagation?: boolean | 'window';
    /** A callback for when the scroll position changes. */
    onScroll?: React.UIEventHandler<Element>;
    tagName?: keyof JSX.IntrinsicElements;
    /** If set, scroll to this position on update. If null, ignore. */
    top?: SpringValue<number>;
}
type InnerProps = ComponentProps<InnerPropsBase, keyof JSX.IntrinsicElements>;
declare function Inner({ children, defaultLeft, defaultTop, elementRef, left, onScroll, stopScrollPropagation, tagName, top, ...otherProps }: InnerProps): JSX.Element;
declare namespace Inner {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        defaultLeft: PropTypes.Requireable<number>;
        defaultTop: PropTypes.Requireable<number>;
        elementRef: PropTypes.Requireable<object>;
        left: PropTypes.Requireable<object>;
        onScroll: PropTypes.Requireable<(...args: any[]) => any>;
        stopScrollPropagation: PropTypes.Requireable<string | boolean>;
        tagName: PropTypes.Requireable<string>;
        top: PropTypes.Requireable<object>;
    };
}
export default Inner;
