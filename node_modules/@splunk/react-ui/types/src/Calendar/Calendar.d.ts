import React from 'react';
import PropTypes from 'prop-types';
import { DateTableChangeHandler } from './DateTable';
import { ComponentProps } from '../utils/types';
type CalendarChangeHandler = DateTableChangeHandler;
declare const calendarActiveSelector = "[data-active-day=\"true\"]";
interface CalendarPropsBase {
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    /** Highlight today's day. */
    highlightToday?: boolean;
    /**
     * The id of the label. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's label.
     */
    labelledBy?: string;
    /** Locale set by language and localization specifiers. */
    locale?: string;
    /**
     * Overrides the current date, used in HighlightToday story.
     * @private
     */
    mockDate?: string;
    /**
     * Called when a date is selected from the Calendar.
     */
    onChange?: CalendarChangeHandler;
    /** @private. */
    required?: boolean;
    /**
     * The current date value formatted 'YYYY-MM-DD'.
     */
    value?: string;
}
type CalendarProps = ComponentProps<CalendarPropsBase, 'div'>;
/**
 * Place focus on the active day.
 */
declare const focusActiveDay: (calendarRef: React.MutableRefObject<HTMLDivElement | null | undefined>) => void;
declare function Calendar({ describedBy, elementRef, highlightToday, labelledBy, locale, mockDate, onChange, required, value: valueProp, ...otherProps }: CalendarProps): JSX.Element;
declare namespace Calendar {
    var propTypes: {
        describedBy: PropTypes.Requireable<string>;
        highlightToday: PropTypes.Requireable<boolean>;
        labelledBy: PropTypes.Requireable<string>;
        locale: PropTypes.Requireable<string>;
        mockDate: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private. */
        required: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
        elementRef: PropTypes.Requireable<object>;
    };
}
export default Calendar;
export { CalendarChangeHandler, calendarActiveSelector, focusActiveDay };
