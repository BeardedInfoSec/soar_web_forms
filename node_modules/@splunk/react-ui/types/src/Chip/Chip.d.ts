import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
/** @public */
type ChipRequestRemoveHandler = (event: React.MouseEvent<HTMLButtonElement>, data: {
    value?: any;
}) => void;
interface ChipPropsBase {
    /**
     * Sets the severity or type of this `Chip`.
     * Setting this prop causes the `backgroundColor` prop to be ignored.
     */
    appearance?: 'info' | 'success' | 'warning' | 'error' | 'outline';
    /**
     * Changes the background color of the `Chip`.
     * Hexadecimal colors and valid color names are allowed, such as `#ffffff` or `white`.
     * If the `appearance` prop is set, this prop is ignored.
     */
    backgroundColor?: string;
    children: React.ReactNode;
    /** Disables the `Chip`. */
    disabled?: boolean;
    /** A React ref which is set to the DOM element when the component mounts and null when it unmounts. */
    elementRef?: React.Ref<HTMLButtonElement | HTMLDivElement>;
    /**
     * Changes the text and icon color of the `Chip`.
     * Hexadecimal colors and valid color names are allowed, such as `#ffffff` or `white`.
     */
    foregroundColor?: string;
    /** The icon to show before the label. See the Icon component for more information. */
    icon?: React.ReactNode;
    /** Includes a remove button if callback is set. */
    onRequestRemove?: ChipRequestRemoveHandler;
    /** Includes this value in `onRequestRemove` callbacks. */
    value?: any;
}
type ChipInteractiveProps = ComponentProps<ChipPropsBase, 'button'> & {
    elementRef?: React.Ref<HTMLButtonElement>;
    onRequestRemove: ChipRequestRemoveHandler;
};
type ChipNonInteractiveProps = ComponentProps<ChipPropsBase, 'div'> & {
    elementRef?: React.Ref<HTMLDivElement>;
    onRequestRemove?: never;
};
type ChipProps = ChipInteractiveProps | ChipNonInteractiveProps;
declare function Chip(props: ChipProps): JSX.Element;
declare namespace Chip {
    var propTypes: {
        appearance: PropTypes.Requireable<string>;
        backgroundColor: PropTypes.Requireable<string>;
        children: PropTypes.Validator<NonNullable<PropTypes.ReactNodeLike>>;
        disabled: PropTypes.Requireable<boolean>;
        elementRef: PropTypes.Requireable<object>;
        foregroundColor: PropTypes.Requireable<string>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onRequestRemove: PropTypes.Requireable<(...args: any[]) => any>;
        /** Includes this value in `onRequestRemove` callbacks. */
        value: PropTypes.Requireable<any>;
    };
}
export default Chip;
export { ChipInteractiveProps, ChipNonInteractiveProps, ChipRequestRemoveHandler };
