/******/ (() => {
    // webpackBootstrap
    /******/ "use strict";
    /******/ // The require scope
    /******/    var e = {};
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/define property getters */
    /******/    (() => {
        /******/ // define getter functions for harmony exports
        /******/ e.d = (t, r) => {
            /******/ for (var n in r) {
                /******/ if (e.o(r, n) && !e.o(t, n)) {
                    /******/ Object.defineProperty(t, n, {
                        enumerable: true,
                        get: r[n]
                    });
                    /******/                }
                /******/            }
            /******/        };
        /******/    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/    (() => {
        /******/ e.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)
        /******/;
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/    (() => {
        /******/ // define __esModule on exports
        /******/ e.r = e => {
            /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                /******/ Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module"
                });
                /******/            }
            /******/            Object.defineProperty(e, "__esModule", {
                value: true
            });
            /******/        };
        /******/    })();
    /******/
    /************************************************************************/    var t = {};
    // ESM COMPAT FLAG
        e.r(t);
    // EXPORTS
        e.d(t, {
        default: () => /* reexport */ i
    });
    // CONCATENATED MODULE: external "react"
    const r = require("react");
    // CONCATENATED MODULE: external "@splunk/ui-utils/focus"
    const n = require("@splunk/ui-utils/focus");
    // CONCATENATED MODULE: external "@splunk/ui-utils/keyboard"
    const a = require("@splunk/ui-utils/keyboard");
    // CONCATENATED MODULE: ./src/useRovingFocus/useRovingFocus.tsx
    var o = {
        enableLoop: false,
        orientation: "horizontal",
        enableTab: false,
        enableHomeEnd: true
    };
    /**
 * This is a private hook not intended for use outside @splunk/react-ui
 *
 * Handles "roving focus" for a group of elements inside a containing element.
 * Elements inside the element that "rovingFocusProps" are set on will act a single tab stop
 * with arrow keys moving focus between them.
 * See https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets#managing_focus_inside_groups
 *
 * ```
 * import React from 'react';
 * import useRovingFocus from '@splunk/react-ui/useRovingFocus';
 *
 * const rovingFocusProps = useRovingFocus();
 *
 * <div {...rovingFocusProps}>
 *     <button type="button">first</button>
 *     <button type="button">second</button>
 * </div>
 * ```
 */    function u() {
        var e = (0, r.useRef)(0);
        var t = (0, r.useRef)([]);
        var u = function r(n) {
            e.current = n;
            t.current.forEach((function(t, r) {
                return r === e.current ? t.removeAttribute("tabindex") : t.setAttribute("tabindex", "-1");
            }));
        };
        var i = function r(a) {
            t.current = a != null ? (0, n.getSortedTabbableElements)(a, {
                ignoreTabIndex: true
            }) : [];
            u(e.current);
        };
        var c = function e(r) {
            var n = r.relatedTarget instanceof Element && t.current.includes(r.relatedTarget);
            if (!n) {
                u(0);
            }
        };
        var l = function e(r) {
            var n = r.target instanceof Element ? t.current.indexOf(r.target) : -1;
            if (n >= 0) {
                u(n);
            }
        };
        var f = function e(r) {
            if (r.nativeEvent.target instanceof HTMLElement) {
                var u = t.current.indexOf(r.nativeEvent.target);
                var i = (0, a.keycode)(r.nativeEvent);
                (0, n.handleFocus)(i, t.current, u, o);
            }
        };
        return {
            ref: i,
            onBlur: c,
            onFocus: l,
            onKeyDown: f
        };
    }
    /* harmony default export */    const i = u;
    // CONCATENATED MODULE: ./src/useRovingFocus/index.ts
    module.exports = t;
    /******/})();