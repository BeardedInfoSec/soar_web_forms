{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _pick = require(\"./pick\");\nvar _utils = require(\"./utils\");\n\n/**\n * Pick Variant is used to create theme-specific css.\n *\n * This example selects an appropriate variable for the current theme.\n * ```\n * import { pickVariant } from '@splunk/themes';\n *\n * ...\n *\n * const Wrapper = styled.div`\n *      ${pickVariant('appearance', {\n *          filled: 'background: red',\n *          open: 'border: 1px solid red',\n *      })}\n * `;\n * ```\n * This example selects an appropriate block of css for the current theme.\n * ```\n *  const Wrapper = styled.div`\n *      ${pickVariant('appearance', {\n *          filled: {\n *              enterprise: 'background: green',\n *              prisma: 'background: blue',\n *          },\n *          open: {\n *              enterprise: 'border: 1px solid green',\n *              prisma: 'border: 1px solid blue',\n *          },\n *      })}\n * `;\n * ```\n * @param {string} propName - The prop name used to resolve the variants. The prop value must be a `string` or `boolean`.\n * @param {object} themeOptions - An object consisting of a tree of theme options, with the prop variants the top of the tree and optional\n * theme variants below (`enterprise|prisma`, `light|dark`, or `compact|comfortable`).\n * @returns {function} The returned function is called by `styled-components`, which provides the props and theme context.\n * @public\n */\nvar pickVariant = function pickVariant(propName, tree) {\n  return function (props) {\n    var _props$theme;\n\n    // TS: must assume prop value can be used as string key\n    var variantKey = props[propName];\n    var subTree = tree[variantKey];\n    if ((0, _pick.isInterpolationResult)(subTree)) {\n      return subTree;\n    }\n    var theme = (0, _utils.addThemeDefaults)((_props$theme = props.theme) === null || _props$theme === void 0 ? void 0 : _props$theme.splunkThemeV1);\n    return (0, _pick.getThemeVariant)(subTree, theme);\n  };\n};\nvar _default = pickVariant;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_pick","require","_utils","pickVariant","propName","tree","props","_props$theme","variantKey","subTree","isInterpolationResult","theme","addThemeDefaults","splunkThemeV1","getThemeVariant","_default"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/node_modules/@splunk/themes/pickVariant.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _pick = require(\"./pick\");\n\nvar _utils = require(\"./utils\");\n\n/**\n * Pick Variant is used to create theme-specific css.\n *\n * This example selects an appropriate variable for the current theme.\n * ```\n * import { pickVariant } from '@splunk/themes';\n *\n * ...\n *\n * const Wrapper = styled.div`\n *      ${pickVariant('appearance', {\n *          filled: 'background: red',\n *          open: 'border: 1px solid red',\n *      })}\n * `;\n * ```\n * This example selects an appropriate block of css for the current theme.\n * ```\n *  const Wrapper = styled.div`\n *      ${pickVariant('appearance', {\n *          filled: {\n *              enterprise: 'background: green',\n *              prisma: 'background: blue',\n *          },\n *          open: {\n *              enterprise: 'border: 1px solid green',\n *              prisma: 'border: 1px solid blue',\n *          },\n *      })}\n * `;\n * ```\n * @param {string} propName - The prop name used to resolve the variants. The prop value must be a `string` or `boolean`.\n * @param {object} themeOptions - An object consisting of a tree of theme options, with the prop variants the top of the tree and optional\n * theme variants below (`enterprise|prisma`, `light|dark`, or `compact|comfortable`).\n * @returns {function} The returned function is called by `styled-components`, which provides the props and theme context.\n * @public\n */\nvar pickVariant = function pickVariant(propName, tree) {\n  return function (props) {\n    var _props$theme;\n\n    // TS: must assume prop value can be used as string key\n    var variantKey = props[propName];\n    var subTree = tree[variantKey];\n\n    if ((0, _pick.isInterpolationResult)(subTree)) {\n      return subTree;\n    }\n\n    var theme = (0, _utils.addThemeDefaults)((_props$theme = props.theme) === null || _props$theme === void 0 ? void 0 : _props$theme.splunkThemeV1);\n    return (0, _pick.getThemeVariant)(subTree, theme);\n  };\n};\n\nvar _default = pickVariant;\nexports[\"default\"] = _default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AAE3B,IAAIE,KAAK,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7B,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAG,SAASA,WAAWA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACrD,OAAO,UAAUC,KAAK,EAAE;IACtB,IAAIC,YAAY;;IAEhB;IACA,IAAIC,UAAU,GAAGF,KAAK,CAACF,QAAQ,CAAC;IAChC,IAAIK,OAAO,GAAGJ,IAAI,CAACG,UAAU,CAAC;IAE9B,IAAI,CAAC,CAAC,EAAER,KAAK,CAACU,qBAAqB,EAAED,OAAO,CAAC,EAAE;MAC7C,OAAOA,OAAO;IAChB;IAEA,IAAIE,KAAK,GAAG,CAAC,CAAC,EAAET,MAAM,CAACU,gBAAgB,EAAE,CAACL,YAAY,GAAGD,KAAK,CAACK,KAAK,MAAM,IAAI,IAAIJ,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACM,aAAa,CAAC;IAChJ,OAAO,CAAC,CAAC,EAAEb,KAAK,CAACc,eAAe,EAAEL,OAAO,EAAEE,KAAK,CAAC;EACnD,CAAC;AACH,CAAC;AAED,IAAII,QAAQ,GAAGZ,WAAW;AAC1BL,OAAO,CAAC,SAAS,CAAC,GAAGiB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}