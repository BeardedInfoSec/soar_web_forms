{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToKeywords = stringToKeywords;\nexports.testPhrase = testPhrase;\nexports.keywordLocationsAll = keywordLocationsAll;\nexports.keywordLocations = keywordLocations;\nexports.filterByKeywords = filterByKeywords;\nvar _includes = _interopRequireDefault(require(\"lodash/includes\"));\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\n/**\n * @file\n * A set of functions for filtering items, often menu items. For simple use cases,\n * use `filterByKeywords`. Use `stringToKeywords` and `testPhrase` when more control\n * of the filtering is necessary.\n */\n\n/**\n * Converts a string (filterPhrase) to an array of keyword tokens. Tokens are usually words, but can\n * be a multi-word phrase if quotes are used. The output is suitable for the `testPhrase` function.\n *\n * @param {String} filterPhrase - The phrase to be broken into keywork tokens.\n * @returns {String[]}\n * @public\n */\nfunction stringToKeywords(filterPhrase) {\n  if (!(0, _isString[\"default\"])(filterPhrase)) {\n    return [];\n  }\n  return (filterPhrase.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g) || []).map(function (word) {\n    return word.replace(/^\"(.*)\"$/, '$1').toLowerCase();\n  });\n}\n/**\n * Tests if a phrase matches a list of keywords. All keywords must be included in the phrase for a\n * match.\n *\n * Examples:\n * ```js\n * stringToKeywords('Named Bob'); // ['Named', 'Bob']\n * stringToKeywords('\"Named Bob\"'); // ['Named Bob']\n * stringToKeywords('A Street Cat \"Named Bob\"'); // ['A', 'Street', 'Cat', 'Named Bob']\n * ```\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Boolean}\n * @public\n */\n\nfunction testPhrase(phrase, keywords) {\n  if (!(0, _isString[\"default\"])(phrase)) {\n    return false;\n  }\n  var p = phrase.toLowerCase();\n  return keywords.every(function (keyword) {\n    return (0, _includes[\"default\"])(p, keyword);\n  });\n}\n/**\n * Looks for keyword locations in a phrase. Not all keywords need to match for results to be returned.\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Object[] | false} An array of matches with keyword, start index, and end index. Array is sorted\n * by start and end index. Keyword\n * ranges may overlap. Example:\n * ```js\n * [\n *     {\n *         keyword: 'the dash',\n *         start: 0,\n *         end: 8,\n *     },\n *     {\n *         keyword: 'sales',\n *         start: 12,\n *         end: 17,\n *     },\n * ]\n * ```\n * @private\n */\n\nfunction keywordLocationsAll(phrase, keywords) {\n  if (!(0, _isString[\"default\"])(phrase) || !keywords || !keywords.length) {\n    return false;\n  }\n  var p = phrase.toLowerCase();\n  var matches = keywords.reduce(function (acc, keyword) {\n    var start = p.indexOf(keyword);\n    if (start >= 0) {\n      acc.push({\n        keyword: keyword,\n        start: start,\n        end: start + keyword.length\n      });\n    }\n    return acc;\n  }, []).sort(function (a, b) {\n    if (a.start !== b.start) {\n      return a.start > b.start ? 1 : -1;\n    }\n    return a.end > b.end ? 1 : -1;\n  });\n  return matches;\n}\n/**\n * Looks for keyword locations in a phrase and return portions of the string that match one or more\n * keywords. The return value can be used to highlight the matched text.\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Object[] | false} An array of location with start index and end index. Keyword\n * ranges can overlap. Example:\n * ```js\n * [\n *     {\n *         start: 0,\n *         end: 8,\n *     },\n *     {\n *         start: 12,\n *         end: 17,\n *     },\n * ]\n * ```\n * @public\n */\n\nfunction keywordLocations(phrase, keywords) {\n  var matches = keywordLocationsAll(phrase, keywords);\n  if (!matches || matches.length !== keywords.length) {\n    return false;\n  }\n  var _matches$ = matches[0],\n    start = _matches$.start,\n    end = _matches$.end;\n  var locations = [];\n  function pushLocation() {\n    locations.push({\n      start: start,\n      end: end\n    });\n  }\n  matches.slice(1).forEach(function (match) {\n    if (match.start > end) {\n      pushLocation();\n      start = match.start;\n      end = match.end;\n    } else if (match.end > end) {\n      end = match.end;\n    }\n  });\n  pushLocation();\n  return locations;\n}\n/**\n * Filters an array of `items` against the `filterPhrase`.\n *\n * @param {Array} items - An array of strings or objects to filter.\n * @param {String} filterPhrase\n * @param {Function} [valueGetter] - An optional function that returns the property of interest if\n * filtering an array of objects.\n * @returns {Array} A filtered list of items.\n * @public\n */\n\nfunction filterByKeywords(items, filterPhrase) {\n  var valueGetter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (item) {\n    return item;\n  };\n  var keywords = stringToKeywords(filterPhrase);\n  return items.filter(function (item) {\n    return testPhrase(valueGetter(item), keywords);\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","stringToKeywords","testPhrase","keywordLocationsAll","keywordLocations","filterByKeywords","_includes","_interopRequireDefault","require","_isString","obj","__esModule","filterPhrase","match","map","word","replace","toLowerCase","phrase","keywords","p","every","keyword","length","matches","reduce","acc","start","indexOf","push","end","sort","a","b","_matches$","locations","pushLocation","slice","forEach","items","valueGetter","arguments","undefined","item","filter"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/node_modules/@splunk/ui-utils/filter.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToKeywords = stringToKeywords;\nexports.testPhrase = testPhrase;\nexports.keywordLocationsAll = keywordLocationsAll;\nexports.keywordLocations = keywordLocations;\nexports.filterByKeywords = filterByKeywords;\n\nvar _includes = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @file\n * A set of functions for filtering items, often menu items. For simple use cases,\n * use `filterByKeywords`. Use `stringToKeywords` and `testPhrase` when more control\n * of the filtering is necessary.\n */\n\n/**\n * Converts a string (filterPhrase) to an array of keyword tokens. Tokens are usually words, but can\n * be a multi-word phrase if quotes are used. The output is suitable for the `testPhrase` function.\n *\n * @param {String} filterPhrase - The phrase to be broken into keywork tokens.\n * @returns {String[]}\n * @public\n */\nfunction stringToKeywords(filterPhrase) {\n  if (!(0, _isString[\"default\"])(filterPhrase)) {\n    return [];\n  }\n\n  return (filterPhrase.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g) || []).map(function (word) {\n    return word.replace(/^\"(.*)\"$/, '$1').toLowerCase();\n  });\n}\n/**\n * Tests if a phrase matches a list of keywords. All keywords must be included in the phrase for a\n * match.\n *\n * Examples:\n * ```js\n * stringToKeywords('Named Bob'); // ['Named', 'Bob']\n * stringToKeywords('\"Named Bob\"'); // ['Named Bob']\n * stringToKeywords('A Street Cat \"Named Bob\"'); // ['A', 'Street', 'Cat', 'Named Bob']\n * ```\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Boolean}\n * @public\n */\n\n\nfunction testPhrase(phrase, keywords) {\n  if (!(0, _isString[\"default\"])(phrase)) {\n    return false;\n  }\n\n  var p = phrase.toLowerCase();\n  return keywords.every(function (keyword) {\n    return (0, _includes[\"default\"])(p, keyword);\n  });\n}\n/**\n * Looks for keyword locations in a phrase. Not all keywords need to match for results to be returned.\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Object[] | false} An array of matches with keyword, start index, and end index. Array is sorted\n * by start and end index. Keyword\n * ranges may overlap. Example:\n * ```js\n * [\n *     {\n *         keyword: 'the dash',\n *         start: 0,\n *         end: 8,\n *     },\n *     {\n *         keyword: 'sales',\n *         start: 12,\n *         end: 17,\n *     },\n * ]\n * ```\n * @private\n */\n\n\nfunction keywordLocationsAll(phrase, keywords) {\n  if (!(0, _isString[\"default\"])(phrase) || !keywords || !keywords.length) {\n    return false;\n  }\n\n  var p = phrase.toLowerCase();\n  var matches = keywords.reduce(function (acc, keyword) {\n    var start = p.indexOf(keyword);\n\n    if (start >= 0) {\n      acc.push({\n        keyword: keyword,\n        start: start,\n        end: start + keyword.length\n      });\n    }\n\n    return acc;\n  }, []).sort(function (a, b) {\n    if (a.start !== b.start) {\n      return a.start > b.start ? 1 : -1;\n    }\n\n    return a.end > b.end ? 1 : -1;\n  });\n  return matches;\n}\n/**\n * Looks for keyword locations in a phrase and return portions of the string that match one or more\n * keywords. The return value can be used to highlight the matched text.\n *\n * @param {String} phrase - The test phrase.\n * @param {String[]} keywords - An array of keywords, as returned by `stringToKeywords`.\n * @returns {Object[] | false} An array of location with start index and end index. Keyword\n * ranges can overlap. Example:\n * ```js\n * [\n *     {\n *         start: 0,\n *         end: 8,\n *     },\n *     {\n *         start: 12,\n *         end: 17,\n *     },\n * ]\n * ```\n * @public\n */\n\n\nfunction keywordLocations(phrase, keywords) {\n  var matches = keywordLocationsAll(phrase, keywords);\n\n  if (!matches || matches.length !== keywords.length) {\n    return false;\n  }\n\n  var _matches$ = matches[0],\n      start = _matches$.start,\n      end = _matches$.end;\n  var locations = [];\n\n  function pushLocation() {\n    locations.push({\n      start: start,\n      end: end\n    });\n  }\n\n  matches.slice(1).forEach(function (match) {\n    if (match.start > end) {\n      pushLocation();\n      start = match.start;\n      end = match.end;\n    } else if (match.end > end) {\n      end = match.end;\n    }\n  });\n  pushLocation();\n  return locations;\n}\n/**\n * Filters an array of `items` against the `filterPhrase`.\n *\n * @param {Array} items - An array of strings or objects to filter.\n * @param {String} filterPhrase\n * @param {Function} [valueGetter] - An optional function that returns the property of interest if\n * filtering an array of objects.\n * @returns {Array} A filtered list of items.\n * @public\n */\n\n\nfunction filterByKeywords(items, filterPhrase) {\n  var valueGetter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (item) {\n    return item;\n  };\n  var keywords = stringToKeywords(filterPhrase);\n  return items.filter(function (item) {\n    return testPhrase(valueGetter(item), keywords);\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}