{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abarbas\\\\Desktop\\\\soar_web_forms\\\\src\\\\components\\\\Configuration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '@splunk/react-ui/Button'; // Import Splunk UI Button\nimport './Configuration.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Configuration = () => {\n  _s();\n  const [jsonConfig, setJsonConfig] = useState('');\n  const [sslVerification, setSslVerification] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState('');\n  const saveConfiguration = async () => {\n    try {\n      const parsedConfig = JSON.parse(jsonConfig);\n\n      // Ensure required fields are present\n      if (!parsedConfig.server || !parsedConfig['ph-auth-token']) {\n        throw new Error('Missing required fields: server or ph-auth-token');\n      }\n\n      // Backend URL (replace with your actual backend IP/domain)\n      const backendUrl = 'http://localhost:5000/configuration';\n\n      // Send data to the backend\n      const response = await axios.post(backendUrl, {\n        server: parsedConfig.server,\n        ph_auth_token: parsedConfig['ph-auth-token'],\n        ssl_verification: sslVerification\n      });\n      if (response.status === 200) {\n        alert('Configuration sent successfully!');\n      } else {\n        throw new Error(`Failed with status code: ${response.status}`);\n      }\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        alert('Invalid JSON. Please check your input.');\n        console.error('JSON parsing error:', error.message);\n      } else if (error.response) {\n        // Server responded with a status outside the 2xx range\n        alert(`Failed to send configuration: ${error.response.data.message || error.response.statusText}`);\n        console.error('Server error:', error.response);\n      } else if (error.request) {\n        // Request was made but no response received\n        alert('No response received from server. Please check the server status.');\n        console.error('Network error:', error.request);\n      } else {\n        alert(`Failed to send configuration: ${error.message}`);\n        console.error('Error during save configuration:', error);\n      }\n    }\n  };\n  const testConnection = async () => {\n    setConnectionStatus('Testing connection...');\n    try {\n      // Fetch the server and ph_auth_token from the backend\n      const configResponse = await axios.get('http://localhost:5000/test_connection');\n      if (configResponse.status !== 200) {\n        throw new Error('Failed to fetch configuration for test connection');\n      }\n      const {\n        server,\n        ph_auth_token\n      } = configResponse.data;\n\n      // Ensure required fields are present\n      if (!server || !ph_auth_token) {\n        throw new Error('Missing server URL or auth token in configuration');\n      }\n      const apiUrl = `${server}/rest/version`;\n      console.log('Sending request to', apiUrl);\n\n      // Perform a test connection to the server\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'ph-auth-token': ph_auth_token,\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setConnectionStatus(`Connection successful: Version ${data.version}`);\n      } else {\n        throw new Error(`Connection failed: ${response.status} ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setConnectionStatus(`Connection failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"configuration-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configuration-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: jsonConfig,\n        onChange: e => setJsonConfig(e.target.value),\n        placeholder: \"Enter JSON configuration here...\",\n        className: \"configuration-textarea\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ssl-checkbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: !sslVerification,\n          onChange: e => setSslVerification(!e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Disable SSL Verification\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          label: \"Send Configuration\",\n          appearance: \"primary\",\n          onClick: saveConfiguration,\n          style: {\n            backgroundColor: '#007BFF',\n            color: '#ffffff'\n          } // Inline style for custom color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"Test Connection\",\n          appearance: \"secondary\",\n          onClick: testConnection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), connectionStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"connection-status\",\n        children: connectionStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(Configuration, \"8vyF1YgI/slbzn2x6ekKtg+csPg=\");\n_c = Configuration;\nexport default Configuration;\nvar _c;\n$RefreshReg$(_c, \"Configuration\");","map":{"version":3,"names":["React","useState","Button","axios","jsxDEV","_jsxDEV","Configuration","_s","jsonConfig","setJsonConfig","sslVerification","setSslVerification","connectionStatus","setConnectionStatus","saveConfiguration","parsedConfig","JSON","parse","server","Error","backendUrl","response","post","ph_auth_token","ssl_verification","status","alert","error","SyntaxError","console","message","data","statusText","request","testConnection","configResponse","get","apiUrl","log","fetch","method","headers","mode","ok","json","version","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","type","checked","label","appearance","onClick","style","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/Configuration.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@splunk/react-ui/Button'; // Import Splunk UI Button\r\nimport './Configuration.css';\r\nimport axios from 'axios';\r\n\r\nconst Configuration = () => {\r\n  const [jsonConfig, setJsonConfig] = useState('');\r\n  const [sslVerification, setSslVerification] = useState(true);\r\n  const [connectionStatus, setConnectionStatus] = useState('');\r\n\r\n  const saveConfiguration = async () => {\r\n    try {\r\n      const parsedConfig = JSON.parse(jsonConfig);\r\n\r\n      // Ensure required fields are present\r\n      if (!parsedConfig.server || !parsedConfig['ph-auth-token']) {\r\n        throw new Error('Missing required fields: server or ph-auth-token');\r\n      }\r\n\r\n      // Backend URL (replace with your actual backend IP/domain)\r\n      const backendUrl = 'http://localhost:5000/configuration';\r\n\r\n      // Send data to the backend\r\n      const response = await axios.post(backendUrl, {\r\n        server: parsedConfig.server,\r\n        ph_auth_token: parsedConfig['ph-auth-token'],\r\n        ssl_verification: sslVerification,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        alert('Configuration sent successfully!');\r\n      } else {\r\n        throw new Error(`Failed with status code: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof SyntaxError) {\r\n        alert('Invalid JSON. Please check your input.');\r\n        console.error('JSON parsing error:', error.message);\r\n      } else if (error.response) {\r\n        // Server responded with a status outside the 2xx range\r\n        alert(`Failed to send configuration: ${error.response.data.message || error.response.statusText}`);\r\n        console.error('Server error:', error.response);\r\n      } else if (error.request) {\r\n        // Request was made but no response received\r\n        alert('No response received from server. Please check the server status.');\r\n        console.error('Network error:', error.request);\r\n      } else {\r\n        alert(`Failed to send configuration: ${error.message}`);\r\n        console.error('Error during save configuration:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const testConnection = async () => {\r\n    setConnectionStatus('Testing connection...');\r\n    try {\r\n      // Fetch the server and ph_auth_token from the backend\r\n      const configResponse = await axios.get('http://localhost:5000/test_connection');\r\n  \r\n      if (configResponse.status !== 200) {\r\n        throw new Error('Failed to fetch configuration for test connection');\r\n      }\r\n  \r\n      const { server, ph_auth_token } = configResponse.data;\r\n  \r\n      // Ensure required fields are present\r\n      if (!server || !ph_auth_token) {\r\n        throw new Error('Missing server URL or auth token in configuration');\r\n      }\r\n  \r\n      const apiUrl = `${server}/rest/version`;\r\n      console.log('Sending request to', apiUrl);\r\n  \r\n      // Perform a test connection to the server\r\n      const response = await fetch(apiUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'ph-auth-token': ph_auth_token,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        mode: 'cors',\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setConnectionStatus(`Connection successful: Version ${data.version}`);\r\n      } else {\r\n        throw new Error(`Connection failed: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setConnectionStatus(`Connection failed: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"configuration-container\">\r\n      <div className=\"configuration-box\">\r\n        <h2>Configuration</h2>\r\n        <textarea\r\n          value={jsonConfig}\r\n          onChange={(e) => setJsonConfig(e.target.value)}\r\n          placeholder=\"Enter JSON configuration here...\"\r\n          className=\"configuration-textarea\"\r\n        />\r\n\r\n        <div className=\"ssl-checkbox-container\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={!sslVerification}\r\n            onChange={(e) => setSslVerification(!e.target.checked)}\r\n          />\r\n          <label>Disable SSL Verification</label>\r\n        </div>\r\n\r\n        <div className=\"button-container\">\r\n          <Button\r\n            label=\"Send Configuration\"\r\n            appearance=\"primary\"\r\n            onClick={saveConfiguration}\r\n            style={{ backgroundColor: '#007BFF', color: '#ffffff' }} // Inline style for custom color\r\n          />\r\n          <Button\r\n            label=\"Test Connection\"\r\n            appearance=\"secondary\"\r\n            onClick={testConnection}\r\n          />\r\n        </div>\r\n\r\n        {connectionStatus && <p className=\"connection-status\">{connectionStatus}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Configuration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}