{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gettext = gettext;\nexports._ = _;\nexports.setSharedTranslator = setSharedTranslator;\nexports.resetSharedTranslator = resetSharedTranslator;\n/**\n * @file\n * Internationalization / translation utility. The exported `gettext` (and its alias `_`) uses\n * a shared translator function that's set to `window.gettext` by default. If `window.gettext` isn't\n * available, the identify function is used, turning `gettext` and `_` into no-ops.\n *\n * Caution is advised when using `setSharedTranslator` and `resetSharedTranslator`. Always restore\n * the translator after changing it, and never assume that the translator hasn't been changed by\n * external code during long-running operations.\n *\n * If used in combination with Splunk Enterprise, `window.gettext` is provided by default. Using the `gettext`\n * and `_` syntax ensures that messages can be extracted, and a catalog file can be generated\n * automatically.\n */\n\nvar internalTranslator;\n\n/**\n * Translates text using the shared translator. By default, this is `window.gettext` if it's available. Otherwise,\n *  the identify function is used.\n * @param {String} text The text to translate.\n * @return {String} The translated text.\n * @public\n */\nfunction gettext() {\n  return internalTranslator.apply(void 0, arguments);\n}\n\n/**\n * This is an alias for `gettext`.\n * @param {String} text The text to translate.\n * @return {String} The translated text.\n * @public\n */\nfunction _() {\n  return internalTranslator.apply(void 0, arguments);\n}\n\n/**\n * Sets the shared translator. It is used by all subsequent calls of `gettext` and `_`.\n * @param {function} newTranslator - A function that returns the translated string.\n * @public\n */\nfunction setSharedTranslator(newTranslator) {\n  internalTranslator = newTranslator;\n}\n\n/**\n * Resets the shared translator to `window.gettext` if available, and the identify function otherwise.\n * This function is invoked automatically during module load.\n * @public\n */\nfunction resetSharedTranslator() {\n  setSharedTranslator(typeof window !== 'undefined' && window.gettext || function (message) {\n    return message;\n  });\n}\nresetSharedTranslator();","map":{"version":3,"names":["Object","defineProperty","exports","value","gettext","_","setSharedTranslator","resetSharedTranslator","internalTranslator","apply","arguments","newTranslator","window","message"],"sources":["/Users/abarbas/Desktop/soar_web_forms/node_modules/@splunk/ui-utils/i18n.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gettext = gettext;\nexports._ = _;\nexports.setSharedTranslator = setSharedTranslator;\nexports.resetSharedTranslator = resetSharedTranslator;\n/**\n * @file\n * Internationalization / translation utility. The exported `gettext` (and its alias `_`) uses\n * a shared translator function that's set to `window.gettext` by default. If `window.gettext` isn't\n * available, the identify function is used, turning `gettext` and `_` into no-ops.\n *\n * Caution is advised when using `setSharedTranslator` and `resetSharedTranslator`. Always restore\n * the translator after changing it, and never assume that the translator hasn't been changed by\n * external code during long-running operations.\n *\n * If used in combination with Splunk Enterprise, `window.gettext` is provided by default. Using the `gettext`\n * and `_` syntax ensures that messages can be extracted, and a catalog file can be generated\n * automatically.\n */\n\nvar internalTranslator;\n\n/**\n * Translates text using the shared translator. By default, this is `window.gettext` if it's available. Otherwise,\n *  the identify function is used.\n * @param {String} text The text to translate.\n * @return {String} The translated text.\n * @public\n */\nfunction gettext() {\n  return internalTranslator.apply(void 0, arguments);\n}\n\n/**\n * This is an alias for `gettext`.\n * @param {String} text The text to translate.\n * @return {String} The translated text.\n * @public\n */\nfunction _() {\n  return internalTranslator.apply(void 0, arguments);\n}\n\n/**\n * Sets the shared translator. It is used by all subsequent calls of `gettext` and `_`.\n * @param {function} newTranslator - A function that returns the translated string.\n * @public\n */\nfunction setSharedTranslator(newTranslator) {\n  internalTranslator = newTranslator;\n}\n\n/**\n * Resets the shared translator to `window.gettext` if available, and the identify function otherwise.\n * This function is invoked automatically during module load.\n * @public\n */\nfunction resetSharedTranslator() {\n  setSharedTranslator(typeof window !== 'undefined' && window.gettext || function (message) {\n    return message;\n  });\n}\nresetSharedTranslator();"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGA,OAAO;AACzBF,OAAO,CAACG,CAAC,GAAGA,CAAC;AACbH,OAAO,CAACI,mBAAmB,GAAGA,mBAAmB;AACjDJ,OAAO,CAACK,qBAAqB,GAAGA,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,kBAAkB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASJ,OAAOA,CAAA,EAAG;EACjB,OAAOI,kBAAkB,CAACC,KAAK,CAAC,KAAK,CAAC,EAAEC,SAAS,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,CAACA,CAAA,EAAG;EACX,OAAOG,kBAAkB,CAACC,KAAK,CAAC,KAAK,CAAC,EAAEC,SAAS,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASJ,mBAAmBA,CAACK,aAAa,EAAE;EAC1CH,kBAAkB,GAAGG,aAAa;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASJ,qBAAqBA,CAAA,EAAG;EAC/BD,mBAAmB,CAAC,OAAOM,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACR,OAAO,IAAI,UAAUS,OAAO,EAAE;IACxF,OAAOA,OAAO;EAChB,CAAC,CAAC;AACJ;AACAN,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}