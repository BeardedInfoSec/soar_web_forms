{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abarbas\\\\Desktop\\\\soar_web_forms\\\\src\\\\components\\\\ViewForms.js\",\n  _s = $RefreshSig$();\n// src/components/ViewForms.js\nimport React, { useState, useEffect } from 'react';\nimport './ViewForms.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewForms = () => {\n  _s();\n  const [forms, setForms] = useState([]);\n  const [manageMode, setManageMode] = useState(false); // Toggle for manage mode\n  const [selectedForms, setSelectedForms] = useState([]); // Track selected forms for deletion\n\n  // Helper function to parse XML from a string\n  const parseXML = xmlString => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\n    const nameElement = xmlDoc.getElementsByTagName('name')[0];\n    const name = nameElement ? nameElement.textContent : 'Unnamed Form';\n    return {\n      name,\n      xml: xmlString\n    };\n  };\n  useEffect(() => {\n    const savedForms = Object.keys(localStorage).map(key => {\n      const xmlData = localStorage.getItem(key);\n      return parseXML(xmlData);\n    }).filter(form => form.name); // Exclude invalid forms\n    setForms(savedForms);\n  }, []);\n  const openForm = formName => {\n    const url = `/forms/${formName}`;\n    window.open(url, '_blank');\n  };\n  const toggleManageMode = () => {\n    setManageMode(!manageMode);\n    setSelectedForms([]); // Clear selections when entering/exiting manage mode\n  };\n  const handleCheckboxChange = formName => {\n    setSelectedForms(prevSelected => prevSelected.includes(formName) ? prevSelected.filter(name => name !== formName) : [...prevSelected, formName]);\n  };\n  const deleteSelectedForms = () => {\n    selectedForms.forEach(formName => {\n      localStorage.removeItem(formName);\n    });\n    setForms(prevForms => prevForms.filter(form => !selectedForms.includes(form.name)));\n    setSelectedForms([]); // Clear selected forms after deletion\n    setManageMode(false); // Exit manage mode\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-forms-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"View Forms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"manage-button\",\n      onClick: toggleManageMode,\n      children: manageMode ? 'Cancel' : 'Manage Forms'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), manageMode && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-selected-button\",\n      onClick: deleteSelectedForms,\n      disabled: selectedForms.length === 0,\n      children: \"Delete Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"form-list\",\n      children: forms.map((form, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"form-card\",\n        children: [manageMode && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedForms.includes(form.name),\n          onChange: () => handleCheckboxChange(form.name),\n          className: \"form-checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"form-name\",\n          onClick: () => !manageMode && openForm(form.name),\n          children: form.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewForms, \"pg2ZTSVKjUBIcS5oorAqLAiSCTQ=\");\n_c = ViewForms;\nexport default ViewForms;\nvar _c;\n$RefreshReg$(_c, \"ViewForms\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ViewForms","_s","forms","setForms","manageMode","setManageMode","selectedForms","setSelectedForms","parseXML","xmlString","parser","DOMParser","xmlDoc","parseFromString","nameElement","getElementsByTagName","name","textContent","xml","savedForms","Object","keys","localStorage","map","key","xmlData","getItem","filter","form","openForm","formName","url","window","open","toggleManageMode","handleCheckboxChange","prevSelected","includes","deleteSelectedForms","forEach","removeItem","prevForms","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","index","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/ViewForms.js"],"sourcesContent":["// src/components/ViewForms.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ViewForms.css';\r\n\r\nconst ViewForms = () => {\r\n  const [forms, setForms] = useState([]);\r\n  const [manageMode, setManageMode] = useState(false); // Toggle for manage mode\r\n  const [selectedForms, setSelectedForms] = useState([]); // Track selected forms for deletion\r\n\r\n  // Helper function to parse XML from a string\r\n  const parseXML = (xmlString) => {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\r\n    const nameElement = xmlDoc.getElementsByTagName('name')[0];\r\n    const name = nameElement ? nameElement.textContent : 'Unnamed Form';\r\n    return { name, xml: xmlString };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const savedForms = Object.keys(localStorage)\r\n      .map((key) => {\r\n        const xmlData = localStorage.getItem(key);\r\n        return parseXML(xmlData);\r\n      })\r\n      .filter((form) => form.name); // Exclude invalid forms\r\n    setForms(savedForms);\r\n  }, []);\r\n\r\n  const openForm = (formName) => {\r\n    const url = `/forms/${formName}`;\r\n    window.open(url, '_blank');\r\n  };\r\n\r\n  const toggleManageMode = () => {\r\n    setManageMode(!manageMode);\r\n    setSelectedForms([]); // Clear selections when entering/exiting manage mode\r\n  };\r\n\r\n  const handleCheckboxChange = (formName) => {\r\n    setSelectedForms((prevSelected) =>\r\n      prevSelected.includes(formName)\r\n        ? prevSelected.filter((name) => name !== formName)\r\n        : [...prevSelected, formName]\r\n    );\r\n  };\r\n\r\n  const deleteSelectedForms = () => {\r\n    selectedForms.forEach((formName) => {\r\n      localStorage.removeItem(formName);\r\n    });\r\n    setForms((prevForms) => prevForms.filter((form) => !selectedForms.includes(form.name)));\r\n    setSelectedForms([]); // Clear selected forms after deletion\r\n    setManageMode(false); // Exit manage mode\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-forms-container\">\r\n      <h2>View Forms</h2>\r\n      <button className=\"manage-button\" onClick={toggleManageMode}>\r\n        {manageMode ? 'Cancel' : 'Manage Forms'}\r\n      </button>\r\n\r\n      {manageMode && (\r\n        <button className=\"delete-selected-button\" onClick={deleteSelectedForms} disabled={selectedForms.length === 0}>\r\n          Delete Selected\r\n        </button>\r\n      )}\r\n\r\n      <ul className=\"form-list\">\r\n        {forms.map((form, index) => (\r\n          <li key={index} className=\"form-card\">\r\n            {manageMode && (\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedForms.includes(form.name)}\r\n                onChange={() => handleCheckboxChange(form.name)}\r\n                className=\"form-checkbox\"\r\n              />\r\n            )}\r\n            <span className=\"form-name\" onClick={() => !manageMode && openForm(form.name)}>\r\n              {form.name}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewForms;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}