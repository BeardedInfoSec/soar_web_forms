{"ast":null,"code":"import React,{useState}from'react';import Button from'@splunk/react-ui/Button';// Import Splunk UI Button\nimport'./Configuration.css';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Configuration=()=>{const[jsonConfig,setJsonConfig]=useState('');const[sslVerification,setSslVerification]=useState(true);const[connectionStatus,setConnectionStatus]=useState('');const saveConfiguration=async()=>{try{const parsedConfig=JSON.parse(jsonConfig);// Ensure required fields are present\nif(!parsedConfig.server||!parsedConfig['ph-auth-token']){throw new Error('Missing required fields: server or ph-auth-token');}// Backend URL (replace with your actual backend IP/domain)\nconst backendUrl='http://localhost:5000/configuration';// Send data to the backend\nconst response=await axios.post(backendUrl,{server:parsedConfig.server,ph_auth_token:parsedConfig['ph-auth-token'],ssl_verification:sslVerification});if(response.status===200){alert('Configuration sent successfully!');}else{throw new Error(`Failed with status code: ${response.status}`);}}catch(error){if(error instanceof SyntaxError){alert('Invalid JSON. Please check your input.');console.error('JSON parsing error:',error.message);}else if(error.response){// Server responded with a status outside the 2xx range\nalert(`Failed to send configuration: ${error.response.data.message||error.response.statusText}`);console.error('Server error:',error.response);}else if(error.request){// Request was made but no response received\nalert('No response received from server. Please check the server status.');console.error('Network error:',error.request);}else{alert(`Failed to send configuration: ${error.message}`);console.error('Error during save configuration:',error);}}};const testConnection=async()=>{setConnectionStatus('Testing connection...');try{// Fetch the server and ph_auth_token from the backend\nconst configResponse=await axios.get('http://localhost:5000/test_connection');if(configResponse.status!==200){throw new Error('Failed to fetch configuration for test connection');}const{server,ph_auth_token}=configResponse.data;// Ensure required fields are present\nif(!server||!ph_auth_token){throw new Error('Missing server URL or auth token in configuration');}const apiUrl=`${server}/rest/version`;console.log('Sending request to',apiUrl);// Perform a test connection to the server\nconst response=await fetch(apiUrl,{method:'GET',headers:{'ph-auth-token':ph_auth_token,'Content-Type':'application/json'},mode:'cors'});if(response.ok){const data=await response.json();setConnectionStatus(`Connection successful: Version ${data.version}`);}else{throw new Error(`Connection failed: ${response.status} ${response.statusText}`);}}catch(error){console.error('Error:',error);setConnectionStatus(`Connection failed: ${error.message}`);}};return/*#__PURE__*/_jsx(\"div\",{className:\"configuration-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"configuration-box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Configuration\"}),/*#__PURE__*/_jsx(\"textarea\",{value:jsonConfig,onChange:e=>setJsonConfig(e.target.value),placeholder:\"Enter JSON configuration here...\",className:\"configuration-textarea\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"ssl-checkbox-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:!sslVerification,onChange:e=>setSslVerification(!e.target.checked)}),/*#__PURE__*/_jsx(\"label\",{children:\"Disable SSL Verification\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(Button,{label:\"Send Configuration\",appearance:\"primary\",onClick:saveConfiguration,style:{backgroundColor:'#007BFF',color:'#ffffff'}// Inline style for custom color\n}),/*#__PURE__*/_jsx(Button,{label:\"Test Connection\",appearance:\"secondary\",onClick:testConnection})]}),connectionStatus&&/*#__PURE__*/_jsx(\"p\",{className:\"connection-status\",children:connectionStatus})]})});};export default Configuration;","map":{"version":3,"names":["React","useState","Button","axios","jsx","_jsx","jsxs","_jsxs","Configuration","jsonConfig","setJsonConfig","sslVerification","setSslVerification","connectionStatus","setConnectionStatus","saveConfiguration","parsedConfig","JSON","parse","server","Error","backendUrl","response","post","ph_auth_token","ssl_verification","status","alert","error","SyntaxError","console","message","data","statusText","request","testConnection","configResponse","get","apiUrl","log","fetch","method","headers","mode","ok","json","version","className","children","value","onChange","e","target","placeholder","type","checked","label","appearance","onClick","style","backgroundColor","color"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/Configuration.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@splunk/react-ui/Button'; // Import Splunk UI Button\r\nimport './Configuration.css';\r\nimport axios from 'axios';\r\n\r\nconst Configuration = () => {\r\n  const [jsonConfig, setJsonConfig] = useState('');\r\n  const [sslVerification, setSslVerification] = useState(true);\r\n  const [connectionStatus, setConnectionStatus] = useState('');\r\n\r\n  const saveConfiguration = async () => {\r\n    try {\r\n      const parsedConfig = JSON.parse(jsonConfig);\r\n\r\n      // Ensure required fields are present\r\n      if (!parsedConfig.server || !parsedConfig['ph-auth-token']) {\r\n        throw new Error('Missing required fields: server or ph-auth-token');\r\n      }\r\n\r\n      // Backend URL (replace with your actual backend IP/domain)\r\n      const backendUrl = 'http://localhost:5000/configuration';\r\n\r\n      // Send data to the backend\r\n      const response = await axios.post(backendUrl, {\r\n        server: parsedConfig.server,\r\n        ph_auth_token: parsedConfig['ph-auth-token'],\r\n        ssl_verification: sslVerification,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        alert('Configuration sent successfully!');\r\n      } else {\r\n        throw new Error(`Failed with status code: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      if (error instanceof SyntaxError) {\r\n        alert('Invalid JSON. Please check your input.');\r\n        console.error('JSON parsing error:', error.message);\r\n      } else if (error.response) {\r\n        // Server responded with a status outside the 2xx range\r\n        alert(`Failed to send configuration: ${error.response.data.message || error.response.statusText}`);\r\n        console.error('Server error:', error.response);\r\n      } else if (error.request) {\r\n        // Request was made but no response received\r\n        alert('No response received from server. Please check the server status.');\r\n        console.error('Network error:', error.request);\r\n      } else {\r\n        alert(`Failed to send configuration: ${error.message}`);\r\n        console.error('Error during save configuration:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const testConnection = async () => {\r\n    setConnectionStatus('Testing connection...');\r\n    try {\r\n      // Fetch the server and ph_auth_token from the backend\r\n      const configResponse = await axios.get('http://localhost:5000/test_connection');\r\n  \r\n      if (configResponse.status !== 200) {\r\n        throw new Error('Failed to fetch configuration for test connection');\r\n      }\r\n  \r\n      const { server, ph_auth_token } = configResponse.data;\r\n  \r\n      // Ensure required fields are present\r\n      if (!server || !ph_auth_token) {\r\n        throw new Error('Missing server URL or auth token in configuration');\r\n      }\r\n  \r\n      const apiUrl = `${server}/rest/version`;\r\n      console.log('Sending request to', apiUrl);\r\n  \r\n      // Perform a test connection to the server\r\n      const response = await fetch(apiUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'ph-auth-token': ph_auth_token,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        mode: 'cors',\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setConnectionStatus(`Connection successful: Version ${data.version}`);\r\n      } else {\r\n        throw new Error(`Connection failed: ${response.status} ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setConnectionStatus(`Connection failed: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"configuration-container\">\r\n      <div className=\"configuration-box\">\r\n        <h2>Configuration</h2>\r\n        <textarea\r\n          value={jsonConfig}\r\n          onChange={(e) => setJsonConfig(e.target.value)}\r\n          placeholder=\"Enter JSON configuration here...\"\r\n          className=\"configuration-textarea\"\r\n        />\r\n\r\n        <div className=\"ssl-checkbox-container\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={!sslVerification}\r\n            onChange={(e) => setSslVerification(!e.target.checked)}\r\n          />\r\n          <label>Disable SSL Verification</label>\r\n        </div>\r\n\r\n        <div className=\"button-container\">\r\n          <Button\r\n            label=\"Send Configuration\"\r\n            appearance=\"primary\"\r\n            onClick={saveConfiguration}\r\n            style={{ backgroundColor: '#007BFF', color: '#ffffff' }} // Inline style for custom color\r\n          />\r\n          <Button\r\n            label=\"Test Connection\"\r\n            appearance=\"secondary\"\r\n            onClick={testConnection}\r\n          />\r\n        </div>\r\n\r\n        {connectionStatus && <p className=\"connection-status\">{connectionStatus}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Configuration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}