{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGUID = createGUID;\nexports.createDOMID = createDOMID;\n\n/**\n * Creates a Globally Unique Identifier in the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,\n * where each x is replaced with a hexadecimal digit from 0 to f, and y is replaced with a\n * hexadecimal digit from 8 to b. This is not compatible with DOM ids, which must\n * start with a letter.\n *\n * @returns {String}\n * @public\n */\nfunction createGUID() {\n  var template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  return template.replace(/[xy]/g, function (_char) {\n    var random = Math.floor(Math.random() * 16);\n    var value = _char === 'x' ? random : random % 4 + 8;\n    return value.toString(16);\n  });\n}\n/**\n * Creates a Globally Unique Identifier prefixed with one or more letters to create a valid DOM id.\n *\n * @param {String} [prefix=id] A prefix, which must start with a letter and may only contain\n * letters, digits, hyphens, and underscores.\n * @returns {String}\n * @public\n */\n\nfunction createDOMID() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n  if (prefix.match(/^[a-zA-Z][\\w-]*$/)) {\n    return \"\".concat(prefix, \"-\").concat(createGUID());\n  }\n  throw new Error('createDOMID: Prefix must start with a letter and may only contain letters, digits, hyphens and underscores');\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createGUID","createDOMID","template","replace","_char","random","Math","floor","toString","prefix","arguments","length","undefined","match","concat","Error"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/node_modules/@splunk/ui-utils/id.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGUID = createGUID;\nexports.createDOMID = createDOMID;\n\n/**\n * Creates a Globally Unique Identifier in the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,\n * where each x is replaced with a hexadecimal digit from 0 to f, and y is replaced with a\n * hexadecimal digit from 8 to b. This is not compatible with DOM ids, which must\n * start with a letter.\n *\n * @returns {String}\n * @public\n */\nfunction createGUID() {\n  var template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  return template.replace(/[xy]/g, function (_char) {\n    var random = Math.floor(Math.random() * 16);\n    var value = _char === 'x' ? random : random % 4 + 8;\n    return value.toString(16);\n  });\n}\n/**\n * Creates a Globally Unique Identifier prefixed with one or more letters to create a valid DOM id.\n *\n * @param {String} [prefix=id] A prefix, which must start with a letter and may only contain\n * letters, digits, hyphens, and underscores.\n * @returns {String}\n * @public\n */\n\n\nfunction createDOMID() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';\n\n  if (prefix.match(/^[a-zA-Z][\\w-]*$/)) {\n    return \"\".concat(prefix, \"-\").concat(createGUID());\n  }\n\n  throw new Error('createDOMID: Prefix must start with a letter and may only contain letters, digits, hyphens and underscores');\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,UAAU,GAAGA,UAAU;AAC/BF,OAAO,CAACG,WAAW,GAAGA,WAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,UAAUA,CAAA,EAAG;EACpB,IAAIE,QAAQ,GAAG,sCAAsC;EACrD,OAAOA,QAAQ,CAACC,OAAO,CAAC,OAAO,EAAE,UAAUC,KAAK,EAAE;IAChD,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;IAC3C,IAAIN,KAAK,GAAGK,KAAK,KAAK,GAAG,GAAGC,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAG,CAAC;IACnD,OAAON,KAAK,CAACS,QAAQ,CAAC,EAAE,CAAC;EAC3B,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASP,WAAWA,CAAA,EAAG;EACrB,IAAIQ,MAAM,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;EAErF,IAAID,MAAM,CAACI,KAAK,CAAC,kBAAkB,CAAC,EAAE;IACpC,OAAO,EAAE,CAACC,MAAM,CAACL,MAAM,EAAE,GAAG,CAAC,CAACK,MAAM,CAACd,UAAU,CAAC,CAAC,CAAC;EACpD;EAEA,MAAM,IAAIe,KAAK,CAAC,4GAA4G,CAAC;AAC/H","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}