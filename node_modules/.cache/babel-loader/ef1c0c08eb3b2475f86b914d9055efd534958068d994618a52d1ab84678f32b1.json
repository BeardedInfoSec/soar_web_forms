{"ast":null,"code":"// src/components/ViewForms.js\nimport React,{useState,useEffect}from'react';import'./ViewForms.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const ViewForms=_ref=>{let{userRole}=_ref;const[forms,setForms]=useState([]);const[manageMode,setManageMode]=useState(false);// Toggle for manage mode\nconst[selectedForms,setSelectedForms]=useState([]);// Track selected forms for deletion\n// Helper function to parse XML from a string\nconst parseXML=xmlString=>{const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlString,'application/xml');const nameElement=xmlDoc.getElementsByTagName('name')[0];const name=nameElement?nameElement.textContent:'Unnamed Form';return{name,xml:xmlString};};useEffect(()=>{const fetchForms=async()=>{try{const response=await fetch('http://localhost:5000/forms');// Update with your backend URL\nif(!response.ok){throw new Error(`Failed to fetch forms: ${response.status}`);}const data=await response.json();// Include the ID and parse XML data\nsetForms(data.map(form=>({id:form.id,// Store the ID for deletion\n...parseXML(form.xml_data)// Parse XML from the database\n})));}catch(error){console.error('Error fetching forms:',error);}};fetchForms();},[]);const openForm=formName=>{const url=`/forms/${encodeURIComponent(formName)}`;window.open(url,'_blank');// Ensure this properly opens a new tab without affecting session\n};const toggleManageMode=()=>{setManageMode(!manageMode);setSelectedForms([]);// Clear selections when entering/exiting manage mode\n};const handleCheckboxChange=formId=>{setSelectedForms(prevSelected=>prevSelected.includes(formId)?prevSelected.filter(id=>id!==formId):[...prevSelected,formId]);};const deleteSelectedForms=async()=>{try{await Promise.all(selectedForms.map(async formId=>{const response=await fetch(`http://localhost:5000/forms/${formId}`,{// Use form.id for deletion\nmethod:'DELETE'});if(!response.ok){throw new Error(`Failed to delete form: ${response.status}`);}}));// Update the forms state after deletion\nsetForms(prevForms=>prevForms.filter(form=>!selectedForms.includes(form.id)));// Filter by ID\nsetSelectedForms([]);// Clear selected forms after deletion\nsetManageMode(false);// Exit manage mode\n}catch(error){console.error('Error deleting forms:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"view-forms-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"View Forms\"}),(userRole==='developer'||userRole==='admin')&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"manage-button\",onClick:toggleManageMode,children:manageMode?'Cancel':'Manage Forms'}),manageMode&&/*#__PURE__*/_jsx(\"button\",{className:\"delete-selected-button\",onClick:deleteSelectedForms,disabled:selectedForms.length===0,children:\"Delete Selected\"})]}),/*#__PURE__*/_jsx(\"ul\",{className:\"form-list\",children:forms.map(form=>/*#__PURE__*/_jsxs(\"li\",{className:\"form-card\",children:[\" \",manageMode&&(userRole==='developer'||userRole==='admin')&&/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:selectedForms.includes(form.id)// Check by form ID\n,onChange:()=>handleCheckboxChange(form.id)// Pass form ID to handler\n,className:\"form-checkbox\"}),/*#__PURE__*/_jsx(\"span\",{className:\"form-name\",onClick:()=>!manageMode&&openForm(form.name),children:form.name})]},form.id))})]});};export default ViewForms;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ViewForms","_ref","userRole","forms","setForms","manageMode","setManageMode","selectedForms","setSelectedForms","parseXML","xmlString","parser","DOMParser","xmlDoc","parseFromString","nameElement","getElementsByTagName","name","textContent","xml","fetchForms","response","fetch","ok","Error","status","data","json","map","form","id","xml_data","error","console","openForm","formName","url","encodeURIComponent","window","open","toggleManageMode","handleCheckboxChange","formId","prevSelected","includes","filter","deleteSelectedForms","Promise","all","method","prevForms","className","children","onClick","disabled","length","type","checked","onChange"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/ViewForms.js"],"sourcesContent":["// src/components/ViewForms.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ViewForms.css';\r\n\r\nconst ViewForms = ({ userRole }) => {\r\n  const [forms, setForms] = useState([]);\r\n  const [manageMode, setManageMode] = useState(false); // Toggle for manage mode\r\n  const [selectedForms, setSelectedForms] = useState([]); // Track selected forms for deletion\r\n\r\n  // Helper function to parse XML from a string\r\n  const parseXML = (xmlString) => {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\r\n    const nameElement = xmlDoc.getElementsByTagName('name')[0];\r\n    const name = nameElement ? nameElement.textContent : 'Unnamed Form';\r\n    return { name, xml: xmlString };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchForms = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/forms'); // Update with your backend URL\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch forms: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        // Include the ID and parse XML data\r\n        setForms(data.map(form => ({\r\n          id: form.id, // Store the ID for deletion\r\n          ...parseXML(form.xml_data) // Parse XML from the database\r\n        })));\r\n      } catch (error) {\r\n        console.error('Error fetching forms:', error);\r\n      }\r\n    };\r\n\r\n    fetchForms();\r\n  }, []);\r\n\r\n  const openForm = (formName) => {\r\n    const url = `/forms/${encodeURIComponent(formName)}`;\r\n    window.open(url, '_blank'); // Ensure this properly opens a new tab without affecting session\r\n  };\r\n  \r\n\r\n  const toggleManageMode = () => {\r\n    setManageMode(!manageMode);\r\n    setSelectedForms([]); // Clear selections when entering/exiting manage mode\r\n  };\r\n\r\n  const handleCheckboxChange = (formId) => {\r\n    setSelectedForms((prevSelected) =>\r\n      prevSelected.includes(formId)\r\n        ? prevSelected.filter((id) => id !== formId)\r\n        : [...prevSelected, formId]\r\n    );\r\n  };\r\n\r\n  const deleteSelectedForms = async () => {\r\n    try {\r\n      await Promise.all(\r\n        selectedForms.map(async (formId) => {\r\n          const response = await fetch(`http://localhost:5000/forms/${formId}`, { // Use form.id for deletion\r\n            method: 'DELETE',\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to delete form: ${response.status}`);\r\n          }\r\n        })\r\n      );\r\n\r\n      // Update the forms state after deletion\r\n      setForms((prevForms) => prevForms.filter((form) => !selectedForms.includes(form.id))); // Filter by ID\r\n      setSelectedForms([]); // Clear selected forms after deletion\r\n      setManageMode(false); // Exit manage mode\r\n    } catch (error) {\r\n      console.error('Error deleting forms:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-forms-container\">\r\n      <h2>View Forms</h2>\r\n\r\n      {/* Show the \"Manage Forms\" and \"Delete Selected\" buttons only for \"developer\" and \"admin\" roles */}\r\n      {(userRole === 'developer' || userRole === 'admin') && (\r\n        <>\r\n          <button className=\"manage-button\" onClick={toggleManageMode}>\r\n            {manageMode ? 'Cancel' : 'Manage Forms'}\r\n          </button>\r\n\r\n          {manageMode && (\r\n            <button className=\"delete-selected-button\" onClick={deleteSelectedForms} disabled={selectedForms.length === 0}>\r\n              Delete Selected\r\n            </button>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      <ul className=\"form-list\">\r\n        {forms.map((form) => (\r\n          <li key={form.id} className=\"form-card\"> {/* Use form.id as the key */}\r\n            {manageMode && (userRole === 'developer' || userRole === 'admin') && (\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedForms.includes(form.id)} // Check by form ID\r\n                onChange={() => handleCheckboxChange(form.id)} // Pass form ID to handler\r\n                className=\"form-checkbox\"\r\n              />\r\n            )}\r\n            <span className=\"form-name\" onClick={() => !manageMode && openForm(form.name)}>\r\n              {form.name}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewForms;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}