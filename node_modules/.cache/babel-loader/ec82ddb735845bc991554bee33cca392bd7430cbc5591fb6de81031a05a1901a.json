{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst {\n  Pool\n} = require('pg');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst cors = require('cors');\nconst app = express(); // Initialize the Express app\n\n// Allow CORS requests from your frontend\napp.use(cors({\n  origin: 'http://localhost:3000' // Replace with your frontend's actual URL\n}));\napp.use(express.json()); // Parse incoming JSON requests\n\n// Configure PostgreSQL connection pool\nconst pool = new Pool({\n  user: process.env.PG_USER,\n  host: process.env.PG_HOST,\n  database: process.env.PG_DATABASE,\n  password: process.env.PG_PASSWORD,\n  port: process.env.PG_PORT\n});\n\n// Verify connection to the database and log current user\npool.query('SELECT current_user', (err, result) => {\n  if (err) {\n    console.error('Error checking current user:', err);\n  } else {\n    console.log('Connected to the database as user:', result.rows[0].current_user);\n  }\n});\n\n// Middleware to verify token\nconst authenticate = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.replace('Bearer ', '');\n  if (!token) return res.status(401).send('Access Denied');\n  try {\n    const verified = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = verified;\n    next();\n  } catch (err) {\n    res.status(400).send('Invalid token');\n  }\n};\n\n// Helper function to fetch configuration\nconst getConfiguration = async () => {\n  const query = 'SELECT server, ph_auth_token, ssl_verification FROM configurations LIMIT 1';\n  return await pool.query(query);\n};\n\n// Configuration Save Endpoint\napp.post('/configuration', async (req, res) => {\n  const {\n    server,\n    ph_auth_token,\n    ssl_verification\n  } = req.body;\n  if (!server || !ph_auth_token || ssl_verification === undefined) {\n    return res.status(400).json({\n      message: 'Invalid request payload'\n    });\n  }\n  try {\n    // Start a transaction\n    await pool.query('BEGIN');\n\n    // Truncate the table to ensure only one entry exists\n    await pool.query('TRUNCATE TABLE configurations');\n\n    // Insert the new configuration\n    const query = `\n      INSERT INTO configurations (server, ph_auth_token, ssl_verification, created_at, updated_at)\n      VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n      RETURNING *;\n    `;\n    const result = await pool.query(query, [server, ph_auth_token, ssl_verification]);\n\n    // Commit the transaction\n    await pool.query('COMMIT');\n    console.log('Insert result:', result);\n    if (result.rowCount === 1) {\n      res.status(200).json({\n        message: 'Configuration saved successfully',\n        config: result.rows[0]\n      });\n    } else {\n      throw new Error('Insert operation failed');\n    }\n  } catch (err) {\n    // Rollback the transaction in case of an error\n    await pool.query('ROLLBACK');\n    console.error('Error inserting configuration:', err);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Test Connection Endpoint\napp.get('/test_connection', async (req, res) => {\n  try {\n    const result = await getConfiguration(); // Use helper function\n\n    if (result.rowCount === 0) {\n      return res.status(404).json({\n        message: 'No configuration found'\n      });\n    }\n    res.status(200).json(result.rows[0]);\n  } catch (error) {\n    console.error('Error fetching configuration for test connection:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Login Route\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Find the user by username\n    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);\n    if (result.rows.length === 0) {\n      return res.status(400).send('Invalid credentials');\n    }\n    const user = result.rows[0];\n\n    // Compare passwords\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).send('Invalid credentials');\n    }\n\n    // Generate a JWT token\n    const token = jwt.sign({\n      userId: user.id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      token\n    });\n  } catch (err) {\n    console.error('Error logging in:', err);\n    res.status(500).send('Error logging in');\n  }\n});\n\n// Protected Route Example\napp.get('/protected', authenticate, (req, res) => {\n  res.send('This is a protected route');\n});\n\n// Save Form Endpoint\napp.post('/save_form', async (req, res) => {\n  const {\n    name,\n    label,\n    tags,\n    elements,\n    xmlData\n  } = req.body;\n  if (!name || !label || !elements || !xmlData) {\n    return res.status(400).json({\n      message: 'Name, label, elements, and xmlData are required'\n    });\n  }\n  try {\n    const query = `\n      INSERT INTO forms (name, label, tags, elements, xml_data, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n      RETURNING *;\n    `;\n    const result = await pool.query(query, [name, label, tags, JSON.stringify(elements), xmlData]);\n    res.status(201).json({\n      message: 'Form saved successfully',\n      form: result.rows[0]\n    });\n  } catch (err) {\n    console.error('Error saving form:', err);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Get Forms Endpoint\napp.get('/forms', async (req, res) => {\n  try {\n    const query = 'SELECT * FROM forms';\n    const result = await pool.query(query);\n    res.status(200).json(result.rows); // Send all forms as a response\n  } catch (error) {\n    console.error('Error fetching forms:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Delete Form Endpoint\napp.delete('/forms/:id', async (req, res) => {\n  const id = parseInt(req.params.id); // Convert the ID to an integer\n\n  if (isNaN(id)) {\n    return res.status(400).json({\n      message: 'Invalid ID format'\n    });\n  }\n  try {\n    const query = 'DELETE FROM forms WHERE id = $1 RETURNING *';\n    const result = await pool.query(query, [id]); // Pass the integer ID\n\n    if (result.rowCount === 0) {\n      return res.status(404).json({\n        message: 'Form not found'\n      });\n    }\n    res.status(200).json({\n      message: 'Form deleted successfully',\n      form: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error deleting form:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\napp.get('/forms/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const query = 'SELECT * FROM forms WHERE id = $1';\n    const result = await pool.query(query, [id]);\n    if (result.rowCount === 0) {\n      return res.status(404).json({\n        message: 'Form not found'\n      });\n    }\n    res.status(200).json(result.rows[0]); // Send the specific form\n  } catch (error) {\n    console.error('Error fetching form:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","Pool","bcrypt","jwt","cors","app","use","origin","json","pool","user","process","env","PG_USER","host","PG_HOST","database","PG_DATABASE","password","PG_PASSWORD","port","PG_PORT","query","err","result","console","error","log","rows","current_user","authenticate","req","res","next","_req$header","token","header","replace","status","send","verified","verify","JWT_SECRET","getConfiguration","post","server","ph_auth_token","ssl_verification","body","undefined","message","rowCount","Error","get","username","length","isMatch","compare","sign","userId","id","expiresIn","name","label","tags","elements","xmlData","JSON","stringify","form","delete","parseInt","params","isNaN","PORT","listen"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/FormBuilder.js"],"sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst { Pool } = require('pg');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\n\r\nconst app = express(); // Initialize the Express app\r\n\r\n// Allow CORS requests from your frontend\r\napp.use(cors({\r\n  origin: 'http://localhost:3000', // Replace with your frontend's actual URL\r\n}));\r\n\r\napp.use(express.json()); // Parse incoming JSON requests\r\n\r\n// Configure PostgreSQL connection pool\r\nconst pool = new Pool({\r\n  user: process.env.PG_USER,\r\n  host: process.env.PG_HOST,\r\n  database: process.env.PG_DATABASE,\r\n  password: process.env.PG_PASSWORD,\r\n  port: process.env.PG_PORT,\r\n});\r\n\r\n// Verify connection to the database and log current user\r\npool.query('SELECT current_user', (err, result) => {\r\n  if (err) {\r\n    console.error('Error checking current user:', err);\r\n  } else {\r\n    console.log('Connected to the database as user:', result.rows[0].current_user);\r\n  }\r\n});\r\n\r\n// Middleware to verify token\r\nconst authenticate = (req, res, next) => {\r\n  const token = req.header('Authorization')?.replace('Bearer ', '');\r\n  if (!token) return res.status(401).send('Access Denied');\r\n\r\n  try {\r\n    const verified = jwt.verify(token, process.env.JWT_SECRET);\r\n    req.user = verified;\r\n    next();\r\n  } catch (err) {\r\n    res.status(400).send('Invalid token');\r\n  }\r\n};\r\n\r\n// Helper function to fetch configuration\r\nconst getConfiguration = async () => {\r\n  const query = 'SELECT server, ph_auth_token, ssl_verification FROM configurations LIMIT 1';\r\n  return await pool.query(query);\r\n};\r\n\r\n// Configuration Save Endpoint\r\napp.post('/configuration', async (req, res) => {\r\n  const { server, ph_auth_token, ssl_verification } = req.body;\r\n\r\n  if (!server || !ph_auth_token || ssl_verification === undefined) {\r\n    return res.status(400).json({ message: 'Invalid request payload' });\r\n  }\r\n\r\n  try {\r\n    // Start a transaction\r\n    await pool.query('BEGIN');\r\n\r\n    // Truncate the table to ensure only one entry exists\r\n    await pool.query('TRUNCATE TABLE configurations');\r\n\r\n    // Insert the new configuration\r\n    const query = `\r\n      INSERT INTO configurations (server, ph_auth_token, ssl_verification, created_at, updated_at)\r\n      VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\r\n      RETURNING *;\r\n    `;\r\n    const result = await pool.query(query, [server, ph_auth_token, ssl_verification]);\r\n    \r\n    // Commit the transaction\r\n    await pool.query('COMMIT');\r\n\r\n    console.log('Insert result:', result);\r\n\r\n    if (result.rowCount === 1) {\r\n      res.status(200).json({ message: 'Configuration saved successfully', config: result.rows[0] });\r\n    } else {\r\n      throw new Error('Insert operation failed');\r\n    }\r\n  } catch (err) {\r\n    // Rollback the transaction in case of an error\r\n    await pool.query('ROLLBACK');\r\n    console.error('Error inserting configuration:', err);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Test Connection Endpoint\r\napp.get('/test_connection', async (req, res) => {\r\n  try {\r\n    const result = await getConfiguration(); // Use helper function\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ message: 'No configuration found' });\r\n    }\r\n\r\n    res.status(200).json(result.rows[0]);\r\n  } catch (error) {\r\n    console.error('Error fetching configuration for test connection:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Login Route\r\napp.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    // Find the user by username\r\n    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);\r\n    if (result.rows.length === 0) {\r\n      return res.status(400).send('Invalid credentials');\r\n    }\r\n\r\n    const user = result.rows[0];\r\n\r\n    // Compare passwords\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).send('Invalid credentials');\r\n    }\r\n\r\n    // Generate a JWT token\r\n    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '1h' });\r\n\r\n    res.json({ token });\r\n  } catch (err) {\r\n    console.error('Error logging in:', err);\r\n    res.status(500).send('Error logging in');\r\n  }\r\n});\r\n\r\n// Protected Route Example\r\napp.get('/protected', authenticate, (req, res) => {\r\n  res.send('This is a protected route');\r\n});\r\n\r\n// Save Form Endpoint\r\napp.post('/save_form', async (req, res) => {\r\n  const { name, label, tags, elements, xmlData } = req.body;\r\n\r\n  if (!name || !label || !elements || !xmlData) {\r\n    return res.status(400).json({ message: 'Name, label, elements, and xmlData are required' });\r\n  }\r\n\r\n  try {\r\n    const query = `\r\n      INSERT INTO forms (name, label, tags, elements, xml_data, created_at, updated_at)\r\n      VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\r\n      RETURNING *;\r\n    `;\r\n    const result = await pool.query(query, [name, label, tags, JSON.stringify(elements), xmlData]);\r\n\r\n    res.status(201).json({ message: 'Form saved successfully', form: result.rows[0] });\r\n  } catch (err) {\r\n    console.error('Error saving form:', err);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Get Forms Endpoint\r\napp.get('/forms', async (req, res) => {\r\n  try {\r\n    const query = 'SELECT * FROM forms';\r\n    const result = await pool.query(query);\r\n    \r\n    res.status(200).json(result.rows); // Send all forms as a response\r\n  } catch (error) {\r\n    console.error('Error fetching forms:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Delete Form Endpoint\r\napp.delete('/forms/:id', async (req, res) => {\r\n  const id = parseInt(req.params.id); // Convert the ID to an integer\r\n\r\n  if (isNaN(id)) {\r\n    return res.status(400).json({ message: 'Invalid ID format' });\r\n  }\r\n\r\n  try {\r\n    const query = 'DELETE FROM forms WHERE id = $1 RETURNING *';\r\n    const result = await pool.query(query, [id]); // Pass the integer ID\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ message: 'Form not found' });\r\n    }\r\n\r\n    res.status(200).json({ message: 'Form deleted successfully', form: result.rows[0] });\r\n  } catch (error) {\r\n    console.error('Error deleting form:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\napp.get('/forms/:id', async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const query = 'SELECT * FROM forms WHERE id = $1';\r\n    const result = await pool.query(query, [id]);\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ message: 'Form not found' });\r\n    }\r\n\r\n    res.status(200).json(result.rows[0]); // Send the specific form\r\n  } catch (error) {\r\n    console.error('Error fetching form:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Start the server\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, '0.0.0.0', () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}