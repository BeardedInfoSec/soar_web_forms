{"ast":null,"code":"import { useRef as e, useEffect as r } from \"react\";\nimport { useDeepCompareMemo as t } from \"use-deep-compare\";\nexport default function (n, o, c, u) {\n  const i = e(c);\n  i.current = c;\n  const m = t(() => u, [u]);\n  r(() => {\n    if (!n) return;\n    const e = e => i.current.call(n, e);\n    return n.addEventListener(o, e, m), () => {\n      n.removeEventListener(o, e, m);\n    };\n  }, [n, o, m]);\n}","map":{"version":3,"names":["n","o","c","u","i","e","current","m","t","r","call","addEventListener","removeEventListener"],"sources":["C:\\Users\\Aaron\\Desktop\\soar_web_forms\\node_modules\\use-typed-event-listener\\src\\index.ts"],"sourcesContent":["import * as React from 'react'\nimport { useDeepCompareMemo } from 'use-deep-compare'\n\nfunction useEventListener<KD extends keyof DocumentEventMap>(\n  element: Document | null | undefined,\n  eventType: KD,\n  listener: (this: Document, evt: DocumentEventMap[KD]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener<KH extends keyof HTMLElementEventMap>(\n  element: HTMLElement | null | undefined,\n  eventType: KH,\n  listener: (this: HTMLElement, evt: HTMLElementEventMap[KH]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener<KW extends keyof WindowEventMap>(\n  element: Window | null | undefined,\n  eventType: KW,\n  listener: (this: Window, evt: WindowEventMap[KW]) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\nfunction useEventListener(\n  element: Document | HTMLElement | Window | null | undefined,\n  eventType: string,\n  listener: (evt: Event) => void,\n  options?: boolean | AddEventListenerOptions,\n): void\n\nfunction useEventListener<\n  KD extends keyof DocumentEventMap,\n  KH extends keyof HTMLElementEventMap,\n  KW extends keyof WindowEventMap\n>(\n  element: Document | HTMLElement | Window | null | undefined,\n  eventType: KD | KH | KW | string,\n  listener: (\n    this: typeof element,\n    evt:\n      | DocumentEventMap[KD]\n      | HTMLElementEventMap[KH]\n      | WindowEventMap[KW]\n      | Event,\n  ) => void,\n  options?: boolean | AddEventListenerOptions,\n): void {\n  const listenerRef = React.useRef(listener)\n  listenerRef.current = listener\n\n  const memorizedOptions = useDeepCompareMemo(() => options, [options])\n\n  React.useEffect(() => {\n    if (!element) return undefined\n\n    // to avoid keep updating listener in DOM\n    const wrappedListener: typeof listenerRef.current = (evt) =>\n      listenerRef.current.call(element, evt)\n\n    element.addEventListener(eventType, wrappedListener, memorizedOptions)\n\n    return () => {\n      element.removeEventListener(eventType, wrappedListener, memorizedOptions)\n    }\n  }, [element, eventType, memorizedOptions])\n}\n\nexport default useEventListener\n"],"mappings":";;eA4BA,UAKEA,CAAA,EACAC,CAAA,EACAC,CAAA,EAQAC,CAAA;EAAA,MAEMC,CAAA,GAAcC,CAAA,CAAaH,CAAA;EACjCE,CAAA,CAAYE,OAAA,GAAUJ,CAAA;EAAA,MAEhBK,CAAA,GAAmBC,CAAA,CAAmB,MAAML,CAAA,EAAS,CAACA,CAAA;EAE5DM,CAAA,CAAgB;IAAA,KACTT,CAAA,EAAS;IAAA,MAGRK,CAAA,GAA+CA,CAAA,IACnDD,CAAA,CAAYE,OAAA,CAAQI,IAAA,CAAKV,CAAA,EAASK,CAAA;IAAA,OAEpCL,CAAA,CAAQW,gBAAA,CAAiBV,CAAA,EAAWI,CAAA,EAAiBE,CAAA,GAE9C;MACLP,CAAA,CAAQY,mBAAA,CAAoBX,CAAA,EAAWI,CAAA,EAAiBE,CAAA;IAAA;EAAA,GAEzD,CAACP,CAAA,EAASC,CAAA,EAAWM,CAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}