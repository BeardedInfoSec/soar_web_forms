{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst {\n  Pool\n} = require('pg');\nrequire('dotenv').config();\nconst app = express();\napp.use(express.json());\nconst pool = new Pool({\n  user: 'soar_user',\n  // Database username\n  host: '192.168.50.X',\n  // Replace with the IP address of your PostgreSQL server\n  database: 'soar_web_forms',\n  // Database name\n  password: 'soaring42',\n  // Database user password\n  port: 5432 // Default PostgreSQL port\n});\napp.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Step 1: Query user by username\n    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);\n    if (result.rows.length === 0) {\n      console.error('User not found:', username);\n      return res.status(400).json({\n        message: 'Invalid username or password'\n      });\n    }\n    const user = result.rows[0];\n\n    // Step 2: Compare password using bcrypt\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      console.error('Password mismatch for user:', username);\n      return res.status(400).json({\n        message: 'Invalid username or password'\n      });\n    }\n\n    // Step 3: Generate JWT if passwords match\n    const token = jwt.sign({\n      userId: user.id,\n      username: user.username,\n      role: user.role\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      token\n    });\n  } catch (err) {\n    console.error('Error during login:', err);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","bcrypt","jwt","Pool","config","app","use","json","pool","user","host","database","password","port","post","req","res","username","body","result","query","rows","length","console","error","status","message","isMatch","compare","token","sign","userId","id","role","process","env","JWT_SECRET","expiresIn","err","PORT","listen","log"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/Login.js"],"sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst { Pool } = require('pg');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(express.json());\r\n\r\nconst pool = new Pool({\r\n  user: 'soar_user',                // Database username\r\n  host: '192.168.50.X',             // Replace with the IP address of your PostgreSQL server\r\n  database: 'soar_web_forms',       // Database name\r\n  password: 'soaring42',            // Database user password\r\n  port: 5432,                       // Default PostgreSQL port\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    // Step 1: Query user by username\r\n    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);\r\n    if (result.rows.length === 0) {\r\n      console.error('User not found:', username);\r\n      return res.status(400).json({ message: 'Invalid username or password' });\r\n    }\r\n\r\n    const user = result.rows[0];\r\n\r\n    // Step 2: Compare password using bcrypt\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      console.error('Password mismatch for user:', username);\r\n      return res.status(400).json({ message: 'Invalid username or password' });\r\n    }\r\n\r\n    // Step 3: Generate JWT if passwords match\r\n    const token = jwt.sign(\r\n      { userId: user.id, username: user.username, role: user.role },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '1h' }\r\n    );\r\n\r\n    res.json({ token });\r\n  } catch (err) {\r\n    console.error('Error during login:', err);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,MAAM;EAAEG;AAAK,CAAC,GAAGH,OAAO,CAAC,IAAI,CAAC;AAC9BA,OAAO,CAAC,QAAQ,CAAC,CAACI,MAAM,CAAC,CAAC;AAE1B,MAAMC,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrBM,GAAG,CAACC,GAAG,CAACP,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AAEvB,MAAMC,IAAI,GAAG,IAAIL,IAAI,CAAC;EACpBM,IAAI,EAAE,WAAW;EAAiB;EAClCC,IAAI,EAAE,cAAc;EAAc;EAClCC,QAAQ,EAAE,gBAAgB;EAAQ;EAClCC,QAAQ,EAAE,WAAW;EAAa;EAClCC,IAAI,EAAE,IAAI,CAAwB;AACpC,CAAC,CAAC;AAEFR,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEC,QAAQ;IAAEL;EAAS,CAAC,GAAGG,GAAG,CAACG,IAAI;EAEvC,IAAI;IACF;IACA,MAAMC,MAAM,GAAG,MAAMX,IAAI,CAACY,KAAK,CAAC,yCAAyC,EAAE,CAACH,QAAQ,CAAC,CAAC;IACtF,IAAIE,MAAM,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5BC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEP,QAAQ,CAAC;MAC1C,OAAOD,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;QAAEmB,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC1E;IAEA,MAAMjB,IAAI,GAAGU,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;;IAE3B;IACA,MAAMM,OAAO,GAAG,MAAM1B,MAAM,CAAC2B,OAAO,CAAChB,QAAQ,EAAEH,IAAI,CAACG,QAAQ,CAAC;IAC7D,IAAI,CAACe,OAAO,EAAE;MACZJ,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEP,QAAQ,CAAC;MACtD,OAAOD,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;QAAEmB,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC1E;;IAEA;IACA,MAAMG,KAAK,GAAG3B,GAAG,CAAC4B,IAAI,CACpB;MAAEC,MAAM,EAAEtB,IAAI,CAACuB,EAAE;MAAEf,QAAQ,EAAER,IAAI,CAACQ,QAAQ;MAAEgB,IAAI,EAAExB,IAAI,CAACwB;IAAK,CAAC,EAC7DC,OAAO,CAACC,GAAG,CAACC,UAAU,EACtB;MAAEC,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDrB,GAAG,CAACT,IAAI,CAAC;MAAEsB;IAAM,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZf,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEc,GAAG,CAAC;IACzCtB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAAClB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;AAEF,MAAMa,IAAI,GAAGL,OAAO,CAACC,GAAG,CAACI,IAAI,IAAI,IAAI;AACrClC,GAAG,CAACmC,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBhB,OAAO,CAACkB,GAAG,CAAC,0BAA0BF,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}