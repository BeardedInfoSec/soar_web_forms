{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNumber = isNumber;\nexports.isDecimal = isDecimal;\nexports.isMinus = isMinus;\nexports.isNumeric = isNumeric;\nexports.addsCharacter = addsCharacter;\nexports.keycode = void 0;\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\nvar _isUndefined = _interopRequireDefault(require(\"lodash/isUndefined\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\n/**\n * @file\n * Utilities for handling keyboard events.\n */\nvar keyMap = Object.freeze({\n  ArrowDown: 'down',\n  ArrowUp: 'up',\n  ArrowLeft: 'left',\n  ArrowRight: 'right',\n  Home: 'home',\n  End: 'end',\n  Tab: 'tab'\n});\n/**\n * A utility for mapping key names with their numeric codes. This is an alias for [the third-party\n * library, keycode](https://github.com/timoxley/keycode).\n * @public\n */\n\nvar keycode = function keycode(event) {\n  var result = (0, _keycode[\"default\"])(event);\n  if (result) {\n    return result;\n  } // If the result is undefined, fall back to the custom key map\n  // The `keyMap` is used to make the code compatible with `userEvent.keyboard`,\n  // which uses key names like \"ArrowDown\" that need to be mapped to \"down\".\n\n  return keyMap[event.key];\n};\n/**\n * Whenever possible this library uses event.key because it has fewer issues than event.keyCode.\n * However, Safari 9.0 and earlier only support it for a few keys, such as Enter, and the QA\n * test suite doesn't provide it.\n */\n\nexports.keycode = keycode;\nfunction isValidKey(key) {\n  return (0, _isUndefined[\"default\"])(key) ? false : key !== 'Unidentified';\n}\n/**\n * Tests if the event key is a number.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @returns {Boolean}\n * @public\n */\n\nfunction isNumber(_ref) {\n  var key = _ref.key,\n    keyCode = _ref.keyCode;\n  if (isValidKey(key)) {\n    var keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n    return keys.indexOf(key) >= 0;\n  }\n  return keyCode >= 48 && keyCode <= 57 || keyCode >= 96 && keyCode <= 105;\n}\n/**\n * Tests if the event key is a decimal.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @param {Object} [options]\n * @param {String} [locale.string = 'en-US'] -  The locale determines the decimal separator. Supported locale formats are: `xx`, `xx-XX`, and `xx_XX`.\n * @returns {Boolean}\n * @public\n */\n\nfunction isDecimal(_ref2) {\n  var key = _ref2.key,\n    keyCode = _ref2.keyCode;\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref3$locale = _ref3.locale,\n    locale = _ref3$locale === void 0 ? 'en-US' : _ref3$locale;\n\n  // A more robust and expandable solution would be to use formatToParts() once IE requirements are dropped.\n  var formattedNumber = new Intl.NumberFormat(locale.replace('_', '-')).format(1.2);\n  var decimalSeparator = formattedNumber.indexOf(',') > -1 ? ',' : '.';\n  if (isValidKey(key)) {\n    return key === decimalSeparator || key === 'Decimal';\n  }\n  if (decimalSeparator === '.' && keyCode === keycode('numpad .')) {\n    return true;\n  }\n  return keyCode === keycode(decimalSeparator);\n}\n/**\n * Tests if the event key is a minus sign.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @returns {Boolean}\n * @public\n */\n\nfunction isMinus(_ref4) {\n  var key = _ref4.key,\n    keyCode = _ref4.keyCode;\n  if (isValidKey(key)) {\n    return key === '-' || key === 'Subtract';\n  }\n  return keyCode === keycode('numpad -') || keyCode === keycode('-');\n}\n/**\n * Tests if the event key is a numeric character (number, decimal, or minus).\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @param {Object} [options]\n * @param {String} [locale.string = 'en-US'] - The locale determines the decimal separator. Supported locale formats are: `xx`, `xx-XX`, and `xx_XX`.\n * @returns {Boolean}\n * @public\n */\n\nfunction isNumeric(event, options) {\n  return isNumber(event) || isDecimal(event, options) || isMinus(event);\n}\n/**\n * Tests if the event key adds a character. Enter and Tab return false even though they\n * add characters in some situations.\n * Caveat: Safari 9.0 and earlier might return undefined as this cannot be practically\n * determined.\n * @param {Event} event - A keyboard event that includes a key.\n * @returns {Boolean|Undefined}\n * @public\n */\n\nfunction addsCharacter(_ref5) {\n  var key = _ref5.key;\n  if (isValidKey(key)) {\n    // IE 11 named characters\n    var names = ['Add', 'Decimal', 'Divide', 'Multiply', 'Spacebar', 'Subtract']; // If key is one character it's assumed to be inserting a character rather than some other\n    // type of action.\n\n    return key.length === 1 || names.indexOf(key) >= 0;\n  } // Safari 9.0 and earlier may return undefined\n\n  return undefined;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","isNumber","isDecimal","isMinus","isNumeric","addsCharacter","keycode","_keycode","_interopRequireDefault","require","_isUndefined","obj","__esModule","keyMap","freeze","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Home","End","Tab","event","result","key","isValidKey","_ref","keyCode","keys","indexOf","_ref2","_ref3","arguments","length","undefined","_ref3$locale","locale","formattedNumber","Intl","NumberFormat","replace","format","decimalSeparator","_ref4","options","_ref5","names"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/node_modules/@splunk/ui-utils/keyboard.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNumber = isNumber;\nexports.isDecimal = isDecimal;\nexports.isMinus = isMinus;\nexports.isNumeric = isNumeric;\nexports.addsCharacter = addsCharacter;\nexports.keycode = void 0;\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _isUndefined = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @file\n * Utilities for handling keyboard events.\n */\nvar keyMap = Object.freeze({\n  ArrowDown: 'down',\n  ArrowUp: 'up',\n  ArrowLeft: 'left',\n  ArrowRight: 'right',\n  Home: 'home',\n  End: 'end',\n  Tab: 'tab'\n});\n/**\n * A utility for mapping key names with their numeric codes. This is an alias for [the third-party\n * library, keycode](https://github.com/timoxley/keycode).\n * @public\n */\n\nvar keycode = function keycode(event) {\n  var result = (0, _keycode[\"default\"])(event);\n\n  if (result) {\n    return result;\n  } // If the result is undefined, fall back to the custom key map\n  // The `keyMap` is used to make the code compatible with `userEvent.keyboard`,\n  // which uses key names like \"ArrowDown\" that need to be mapped to \"down\".\n\n\n  return keyMap[event.key];\n};\n/**\n * Whenever possible this library uses event.key because it has fewer issues than event.keyCode.\n * However, Safari 9.0 and earlier only support it for a few keys, such as Enter, and the QA\n * test suite doesn't provide it.\n */\n\n\nexports.keycode = keycode;\n\nfunction isValidKey(key) {\n  return (0, _isUndefined[\"default\"])(key) ? false : key !== 'Unidentified';\n}\n/**\n * Tests if the event key is a number.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @returns {Boolean}\n * @public\n */\n\n\nfunction isNumber(_ref) {\n  var key = _ref.key,\n      keyCode = _ref.keyCode;\n\n  if (isValidKey(key)) {\n    var keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n    return keys.indexOf(key) >= 0;\n  }\n\n  return keyCode >= 48 && keyCode <= 57 || keyCode >= 96 && keyCode <= 105;\n}\n/**\n * Tests if the event key is a decimal.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @param {Object} [options]\n * @param {String} [locale.string = 'en-US'] -  The locale determines the decimal separator. Supported locale formats are: `xx`, `xx-XX`, and `xx_XX`.\n * @returns {Boolean}\n * @public\n */\n\n\nfunction isDecimal(_ref2) {\n  var key = _ref2.key,\n      keyCode = _ref2.keyCode;\n\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$locale = _ref3.locale,\n      locale = _ref3$locale === void 0 ? 'en-US' : _ref3$locale;\n\n  // A more robust and expandable solution would be to use formatToParts() once IE requirements are dropped.\n  var formattedNumber = new Intl.NumberFormat(locale.replace('_', '-')).format(1.2);\n  var decimalSeparator = formattedNumber.indexOf(',') > -1 ? ',' : '.';\n\n  if (isValidKey(key)) {\n    return key === decimalSeparator || key === 'Decimal';\n  }\n\n  if (decimalSeparator === '.' && keyCode === keycode('numpad .')) {\n    return true;\n  }\n\n  return keyCode === keycode(decimalSeparator);\n}\n/**\n * Tests if the event key is a minus sign.\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @returns {Boolean}\n * @public\n */\n\n\nfunction isMinus(_ref4) {\n  var key = _ref4.key,\n      keyCode = _ref4.keyCode;\n\n  if (isValidKey(key)) {\n    return key === '-' || key === 'Subtract';\n  }\n\n  return keyCode === keycode('numpad -') || keyCode === keycode('-');\n}\n/**\n * Tests if the event key is a numeric character (number, decimal, or minus).\n * @param {Event} event - A keyboard event that includes a key, a keyCode, or both.\n * @param {Object} [options]\n * @param {String} [locale.string = 'en-US'] - The locale determines the decimal separator. Supported locale formats are: `xx`, `xx-XX`, and `xx_XX`.\n * @returns {Boolean}\n * @public\n */\n\n\nfunction isNumeric(event, options) {\n  return isNumber(event) || isDecimal(event, options) || isMinus(event);\n}\n/**\n * Tests if the event key adds a character. Enter and Tab return false even though they\n * add characters in some situations.\n * Caveat: Safari 9.0 and earlier might return undefined as this cannot be practically\n * determined.\n * @param {Event} event - A keyboard event that includes a key.\n * @returns {Boolean|Undefined}\n * @public\n */\n\n\nfunction addsCharacter(_ref5) {\n  var key = _ref5.key;\n\n  if (isValidKey(key)) {\n    // IE 11 named characters\n    var names = ['Add', 'Decimal', 'Divide', 'Multiply', 'Spacebar', 'Subtract']; // If key is one character it's assumed to be inserting a character rather than some other\n    // type of action.\n\n    return key.length === 1 || names.indexOf(key) >= 0;\n  } // Safari 9.0 and earlier may return undefined\n\n\n  return undefined;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}