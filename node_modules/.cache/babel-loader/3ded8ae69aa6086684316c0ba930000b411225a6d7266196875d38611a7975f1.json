{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abarbas\\\\Desktop\\\\soar_web_forms\\\\src\\\\components\\\\ViewForms.js\",\n  _s = $RefreshSig$();\n// src/components/ViewForms.js\nimport React, { useState, useEffect } from 'react';\nimport './ViewForms.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewForms = ({\n  userRole\n}) => {\n  _s();\n  const [forms, setForms] = useState([]);\n  const [manageMode, setManageMode] = useState(false); // Toggle for manage mode\n  const [selectedForms, setSelectedForms] = useState([]); // Track selected forms for deletion\n\n  // Helper function to parse XML from a string\n  const parseXML = xmlString => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\n    const nameElement = xmlDoc.getElementsByTagName('name')[0];\n    const name = nameElement ? nameElement.textContent : 'Unnamed Form';\n    return {\n      name,\n      xml: xmlString\n    };\n  };\n  useEffect(() => {\n    const fetchForms = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/forms'); // Update with your backend URL\n        if (!response.ok) {\n          throw new Error(`Failed to fetch forms: ${response.status}`);\n        }\n        const data = await response.json();\n        // Include the ID and parse XML data\n        setForms(data.map(form => ({\n          id: form.id,\n          // Store the ID for deletion\n          ...parseXML(form.xml_data) // Parse XML from the database\n        })));\n      } catch (error) {\n        console.error('Error fetching forms:', error);\n      }\n    };\n    fetchForms();\n  }, []);\n  const openForm = formName => {\n    const url = `/forms/${formName}`;\n    window.open(url, '_blank');\n  };\n  const toggleManageMode = () => {\n    setManageMode(!manageMode);\n    setSelectedForms([]); // Clear selections when entering/exiting manage mode\n  };\n  const handleCheckboxChange = formId => {\n    setSelectedForms(prevSelected => prevSelected.includes(formId) ? prevSelected.filter(id => id !== formId) : [...prevSelected, formId]);\n  };\n  const deleteSelectedForms = async () => {\n    try {\n      await Promise.all(selectedForms.map(async formId => {\n        const response = await fetch(`http://localhost:5000/forms/${formId}`, {\n          // Use form.id for deletion\n          method: 'DELETE'\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to delete form: ${response.status}`);\n        }\n      }));\n\n      // Update the forms state after deletion\n      setForms(prevForms => prevForms.filter(form => !selectedForms.includes(form.id))); // Filter by ID\n      setSelectedForms([]); // Clear selected forms after deletion\n      setManageMode(false); // Exit manage mode\n    } catch (error) {\n      console.error('Error deleting forms:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-forms-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"View Forms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), (userRole === 'developer' || userRole === 'admin') && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"manage-button\",\n        onClick: toggleManageMode,\n        children: manageMode ? 'Cancel' : 'Manage Forms'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), manageMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-selected-button\",\n        onClick: deleteSelectedForms,\n        disabled: selectedForms.length === 0,\n        children: \"Delete Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"form-list\",\n      children: forms.map(form => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"form-card\",\n        children: [\" \", manageMode && (userRole === 'developer' || userRole === 'admin') && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedForms.includes(form.id) // Check by form ID\n          ,\n          onChange: () => handleCheckboxChange(form.id) // Pass form ID to handler\n          ,\n          className: \"form-checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"form-name\",\n          onClick: () => !manageMode && openForm(form.name),\n          children: form.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, form.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewForms, \"pg2ZTSVKjUBIcS5oorAqLAiSCTQ=\");\n_c = ViewForms;\nexport default ViewForms;\nvar _c;\n$RefreshReg$(_c, \"ViewForms\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewForms","userRole","_s","forms","setForms","manageMode","setManageMode","selectedForms","setSelectedForms","parseXML","xmlString","parser","DOMParser","xmlDoc","parseFromString","nameElement","getElementsByTagName","name","textContent","xml","fetchForms","response","fetch","ok","Error","status","data","json","map","form","id","xml_data","error","console","openForm","formName","url","window","open","toggleManageMode","handleCheckboxChange","formId","prevSelected","includes","filter","deleteSelectedForms","Promise","all","method","prevForms","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","length","type","checked","onChange","_c","$RefreshReg$"],"sources":["C:/Users/abarbas/Desktop/soar_web_forms/src/components/ViewForms.js"],"sourcesContent":["// src/components/ViewForms.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport './ViewForms.css';\r\n\r\nconst ViewForms = ({ userRole }) => {\r\n  const [forms, setForms] = useState([]);\r\n  const [manageMode, setManageMode] = useState(false); // Toggle for manage mode\r\n  const [selectedForms, setSelectedForms] = useState([]); // Track selected forms for deletion\r\n\r\n  // Helper function to parse XML from a string\r\n  const parseXML = (xmlString) => {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\r\n    const nameElement = xmlDoc.getElementsByTagName('name')[0];\r\n    const name = nameElement ? nameElement.textContent : 'Unnamed Form';\r\n    return { name, xml: xmlString };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchForms = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/forms'); // Update with your backend URL\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch forms: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        // Include the ID and parse XML data\r\n        setForms(data.map(form => ({\r\n          id: form.id, // Store the ID for deletion\r\n          ...parseXML(form.xml_data) // Parse XML from the database\r\n        })));\r\n      } catch (error) {\r\n        console.error('Error fetching forms:', error);\r\n      }\r\n    };\r\n\r\n    fetchForms();\r\n  }, []);\r\n\r\n  const openForm = (formName) => {\r\n    const url = `/forms/${formName}`;\r\n    window.open(url, '_blank');\r\n  };\r\n\r\n  const toggleManageMode = () => {\r\n    setManageMode(!manageMode);\r\n    setSelectedForms([]); // Clear selections when entering/exiting manage mode\r\n  };\r\n\r\n  const handleCheckboxChange = (formId) => {\r\n    setSelectedForms((prevSelected) =>\r\n      prevSelected.includes(formId)\r\n        ? prevSelected.filter((id) => id !== formId)\r\n        : [...prevSelected, formId]\r\n    );\r\n  };\r\n\r\n  const deleteSelectedForms = async () => {\r\n    try {\r\n      await Promise.all(\r\n        selectedForms.map(async (formId) => {\r\n          const response = await fetch(`http://localhost:5000/forms/${formId}`, { // Use form.id for deletion\r\n            method: 'DELETE',\r\n          });\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to delete form: ${response.status}`);\r\n          }\r\n        })\r\n      );\r\n\r\n      // Update the forms state after deletion\r\n      setForms((prevForms) => prevForms.filter((form) => !selectedForms.includes(form.id))); // Filter by ID\r\n      setSelectedForms([]); // Clear selected forms after deletion\r\n      setManageMode(false); // Exit manage mode\r\n    } catch (error) {\r\n      console.error('Error deleting forms:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"view-forms-container\">\r\n      <h2>View Forms</h2>\r\n\r\n      {/* Show the \"Manage Forms\" and \"Delete Selected\" buttons only for \"developer\" and \"admin\" roles */}\r\n      {(userRole === 'developer' || userRole === 'admin') && (\r\n        <>\r\n          <button className=\"manage-button\" onClick={toggleManageMode}>\r\n            {manageMode ? 'Cancel' : 'Manage Forms'}\r\n          </button>\r\n\r\n          {manageMode && (\r\n            <button className=\"delete-selected-button\" onClick={deleteSelectedForms} disabled={selectedForms.length === 0}>\r\n              Delete Selected\r\n            </button>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      <ul className=\"form-list\">\r\n        {forms.map((form) => (\r\n          <li key={form.id} className=\"form-card\"> {/* Use form.id as the key */}\r\n            {manageMode && (userRole === 'developer' || userRole === 'admin') && (\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedForms.includes(form.id)} // Check by form ID\r\n                onChange={() => handleCheckboxChange(form.id)} // Pass form ID to handler\r\n                className=\"form-checkbox\"\r\n              />\r\n            )}\r\n            <span className=\"form-name\" onClick={() => !manageMode && openForm(form.name)}>\r\n              {form.name}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewForms;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}