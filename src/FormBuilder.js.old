import React, { useState, useEffect, useRef } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import './FormBuilder.css';

const FormBuilder = () => {
  const [formElements, setFormElements] = useState([]);
  const [selectedElementId, setSelectedElementId] = useState(null);
  const [selectedElement, setSelectedElement] = useState(null);
  const [draftElement, setDraftElement] = useState(null);
  const formBuilderRef = useRef(null);

  // Save the form as JSON
  const saveFormAsJson = () => {
    const json = JSON.stringify(formElements, null, 2);
    console.log('Saving JSON:', json);
  };

  // Add new element to form with specific defaults
  const addElement = (elementType, label) => {
    const newElement = {
      id: Date.now(), // Unique identifier
      type: elementType,
      label: label || '',
      placeholder:
        elementType === 'input'
          ? 'Enter text here'
          : elementType === 'email'
          ? 'Enter email here'
          : '',
      alignment: 'center', // Default alignment for all elements
      size: 50, // Default size to 50%
      textAlign: 'left', // Default text alignment for input placeholder
    };
    if (elementType === 'button') {
      newElement.size = 25; // Default button size to 25%
    }
    setFormElements((prevElements) => [...prevElements, newElement]);
  };

  // Select element for editing
  const selectElement = (elementId) => {
    setSelectedElementId(elementId);
    const element = formElements.find((el) => el.id === elementId);
    setSelectedElement(element);
    setDraftElement({ ...element });
  };

  // Deselect element when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        formBuilderRef.current &&
        !formBuilderRef.current.contains(event.target) &&
        !event.target.closest('.element-editor')
      ) {
        setSelectedElementId(null);
        setSelectedElement(null);
        setDraftElement(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Update properties of selected element in draft
  const updateDraftElement = (updatedProps) => {
    setDraftElement((prevDraft) => ({ ...prevDraft, ...updatedProps }));
  };

  // Save changes made to the element
  const saveElementChanges = () => {
    setFormElements((prevElements) =>
      prevElements.map((el) => (el.id === selectedElementId ? { ...el, ...draftElement } : el))
    );
    setSelectedElementId(null);
    setSelectedElement(null);
    setDraftElement(null);
  };

  // Delete selected element
  const deleteElement = (elementId) => {
    setFormElements((prevElements) => prevElements.filter((el) => el.id !== elementId));
    setSelectedElementId(null);
    setSelectedElement(null);
    setDraftElement(null);
  };

  // Clear all elements
  const clearElements = () => {
    setFormElements([]);
    setSelectedElementId(null);
    setSelectedElement(null);
    setDraftElement(null);
  };

  // Handle Drag Start
  const handleDragStart = (result) => {
    // Do not open the element editor when dragging
  };

  // Handle Drag End
  const handleDragEnd = (result) => {
    if (!result.destination || result.source.index === result.destination.index) return;

    setFormElements((prevElements) => {
      const reorderedElements = [...prevElements];
      const [movedElement] = reorderedElements.splice(result.source.index, 1);
      reorderedElements.splice(result.destination.index, 0, movedElement);
      return reorderedElements;
    });
  };

  return (
    <div className="form-builder" ref={formBuilderRef}>
      <div className="element-selector">
        <h3>Elements</h3>
        <button
          className="element-button"
          onClick={(e) => {
            e.stopPropagation();
            addElement('label', 'Label');
          }}
        >
          Label
        </button>
        <button
          className="element-button"
          onClick={(e) => {
            e.stopPropagation();
            addElement('button', 'Button');
          }}
        >
          Button
        </button>
        <button
          className="element-button"
          onClick={(e) => {
            e.stopPropagation();
            addElement('divider', '');
          }}
        >
          Divider
        </button>
        <button
          className="element-button"
          onClick={(e) => {
            e.stopPropagation();
            addElement('input', 'Text Input');
          }}
        >
          Text Input
        </button>
        <button
          className="element-button"
          onClick={(e) => {
            e.stopPropagation();
            addElement('email', 'Email');
          }}
        >
          Email
        </button>
        <button className="clear-elements" onClick={(e) => {
          e.stopPropagation();
          clearElements();
        }}>
          Clear all elements
        </button>
      </div>

      <div className="visualizer" style={{ width: draftElement ? '50%' : '75%' }}>
        <DragDropContext onDragEnd={handleDragEnd} onDragStart={handleDragStart}>
          <Droppable droppableId="form-elements">
            {(provided) => (
              <div
                className="form-preview"
                {...provided.droppableProps}
                ref={provided.innerRef}
                style={{
                  display: 'flex',
                  flexDirection: 'column', // Each element becomes a new row
                  gap: '10px',
                  width: '90%', // Prevent elements from extending beyond the container
                  margin: '0 auto', // Center the form preview in the container
                }}
              >
                {formElements.map((element, index) => (
                  <Draggable
                    key={element.id}
                    draggableId={element.id.toString()}
                    index={index}
                  >
                    {(provided, snapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        onClick={(e) => {
                          e.stopPropagation(); // Prevent deselection on click
                          if (!snapshot.isDragging) {
                            selectElement(element.id);
                          }
                        }}
                        className={`draggable ${
                          snapshot.isDragging || element.id === selectedElementId ? 'dragging' : ''
                        }`}
                        style={{
                          width: `${element.size}%`, // Element width within container
                          boxSizing: 'border-box',
                          border:
                            snapshot.isDragging || element.id === selectedElementId
                              ? '1px solid #ddd'
                              : 'none', // Show border only when dragging or selected
                          borderRadius: '5px',
                          backgroundColor:
                            snapshot.isDragging || element.id === selectedElementId
                              ? '#f0f8ff'
                              : 'transparent',
                          alignSelf:
                            element.alignment === 'left'
                              ? 'flex-start'
                              : element.alignment === 'right'
                              ? 'flex-end'
                              : 'center',
                          transition: snapshot.isDragging ? 'none' : 'transform 0.2s ease',
                          zIndex: snapshot.isDragging ? 1000 : 'auto', // Bring the dragged element to the front
                          ...provided.draggableProps.style,
                        }}
                      >
                        {element.type === 'label' && (
                          <label style={{ display: 'block', width: '100%' }}>
                            {element.label}
                          </label>
                        )}
                        {element.type === 'input' && (
                          <input
                            type="text"
                            placeholder={element.placeholder}
                            style={{
                              width: '100%',
                              textAlign: element.textAlign,
                            }}
                          />
                        )}
                        {element.type === 'email' && (
                          <input
                            type="email"
                            placeholder={element.placeholder}
                            style={{
                              width: '100%',
                              textAlign: element.textAlign,
                            }}
                          />
                        )}
                        {element.type === 'button' && (
                          <button style={{ width: '100%' }}>{element.label}</button>
                        )}
                        {element.type === 'divider' && <hr />}
                      </div>
                    )}
                  </Draggable>
                ))}

                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </div>

      {draftElement && (
        <div className="element-editor" onClick={(e) => e.stopPropagation()}>
          <h3>Edit Element</h3>
          <label>
            Name:
            <input
              type="text"
              value={draftElement.label}
              onChange={(e) => {
                setDraftElement({ ...draftElement, label: e.target.value });
              }}
            />
          </label>

          {(draftElement.type === 'input' || draftElement.type === 'email') && (
            <>
              <label>
                Placeholder:
                <input
                  type="text"
                  value={draftElement.placeholder}
                  onChange={(e) => {
                    setDraftElement({ ...draftElement, placeholder: e.target.value });
                  }}
                />
              </label>
              <label>
                Placeholder Alignment:
                <select
                  value={draftElement.textAlign}
                  onChange={(e) => {
                    setDraftElement({ ...draftElement, textAlign: e.target.value });
                  }}
                >
                  <option value="left">Left</option>
                  <option value="center">Center</option>
                </select>
              </label>
            </>
          )}

          <label>
            Alignment:
            <select
              value={draftElement.alignment}
              onChange={(e) => {
                setDraftElement({ ...draftElement, alignment: e.target.value });
              }}
            >
              <option value="left">Left</option>
              <option value="center">Center</option>
              <option value="right">Right</option>
            </select>
          </label>

          <label>
            Size %
            <input
              type="number"
              value={draftElement.size}
              onChange={(e) => {
                setDraftElement({ ...draftElement, size: e.target.value });
              }}
              min="5"
              max="100"
            />
          </label>
          <button
            className="save-changes-btn"
            onClick={() => {
              saveElementChanges();
            }}
          >
            Save Changes
          </button>
          <button
            className="delete-element-btn"
            onClick={() => deleteElement(selectedElementId)}
          >
            Delete Element
          </button>
        </div>
      )}

      <div className="save-form-section">
        <button className="save-form-btn" onClick={saveFormAsJson}>
          Save Form
        </button>
      </div>
    </div>
  );
};

export default FormBuilder;
